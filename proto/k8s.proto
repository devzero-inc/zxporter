syntax = "proto3";

package api.v1;

option go_package = "github.com/devzero-inc/services/pulse/gen/api/v1;gen";
option java_multiple_files = true;
option java_package = "gen.api.v1";

// Requests
// GetClusterRequest is used to fetch cluster details.
message GetClusterRequest {
  string team_id = 1; // Unique identifier for the team.
  string cluster_id = 2; // Unique identifier for the cluster.
}

// GetClustersRequest is used to fetch clusters for a specific team.
message GetClustersRequest {
  string team_id = 1; // Unique identifier for the team.
}

// GetNodesRequest is used to fetch nodes for a specific cluster.
message GetNodesRequest {
  string team_id = 1; // Unique identifier for the team.
  string cluster_id = 2; // Unique identifier for the cluster.
}

// GetNamespacesRequest is used to fetch namespaces for a specific cluster.
message GetNamespacesRequest {
  string team_id = 1; // Unique identifier for the team.
  string cluster_id = 2; // Unique identifier for the cluster.
}

// GetResourcesRequest is used to fetch resources in a specific namespace.
message GetResourcesRequest {
  string team_id = 1; // Unique identifier for the team.
  string cluster_id = 2; // Unique identifier for the cluster.
  string namespace = 3; // Namespace to query resources from.
  string kind = 4; // Optional filter by resource kind.
}

// GetNodeMetricsRequest is used to fetch metrics for a specific node.
message GetNodeMetricsRequest {
  string node_id = 1; // Unique identifier for the node.
  int32 time_range = 2; // Optional time range in hours.
}

// GetPodMetricsRequest is used to fetch metrics for a specific pod.
message GetPodMetricsRequest {
  string pod_id = 1; // Unique identifier for the pod.
  int32 time_range = 2; // Optional time range in hours.
}

// GetNodeGroupsRequest is used to fetch node groups for a specific cluster.
message GetNodeGroupsRequest {
  string team_id = 1; // Unique identifier for the team.
  string cluster_id = 2; // Unique identifier for the cluster.
}

// Request to get resource analytics for a specific cluster
message GetClusterAnalyticsRequest {
  string team_id = 1;
  string cluster_id = 2;
  int32 time_range = 3; // in hours, optional (default: 24)
}

// GetClusterResponse return clsuter details.
message GetClusterResponse {
  Cluster cluster = 1; // Cluster details.
}

// Responses

// GetClustersResponse contains the list of clusters for a team.
message GetClustersResponse {
  repeated Cluster clusters = 1; // List of clusters.
  int32 total_node_count = 2;
  double total_monthly_cluster_cost = 3;
  double last_month_total_cost = 4;
  double total_cpu_capacity = 5;
  double total_memory_capacity = 6;
  double total_cpu_usage = 7;
  double total_memory_usage = 8;
  double average_cpu_utilization = 9;
  double average_memory_utilization = 10;
  double total_cpu_cost_per_hour = 11;
  double total_memory_cost_per_hour = 12;
  double total_cost_per_hour = 13;
}

message GetClusterAnalyticsResponse {
  string cluster_id = 1;
  string cluster_name = 2;
  string provider = 3;    // Cloud provider
  string region = 4;      // Region
  
  // CPU section
  double allocatable_cpu = 5;      // Total allocatable CPU millicores
  double requested_cpu = 6;        // Total requested CPU millicores
  double used_cpu = 7;             // Current CPU usage in millicores
  double cpu_request_utilization = 8;   // Requested/Allocatable percentage
  double cpu_usage_utilization = 9;     // Used/Allocatable percentage
  
  // Memory section
  double allocatable_memory = 10;  // Total allocatable memory in bytes
  double requested_memory = 11;    // Total requested memory in bytes
  double used_memory = 12;         // Current memory usage in bytes
  double memory_request_utilization = 13;  // Requested/Allocatable percentage
  double memory_usage_utilization = 14;    // Used/Allocatable percentage
  
  // Time series data for utilization charts
  repeated TimeSeriesDataPoint cpu_utilization_data = 15;  // Node CPU utilization over time
  repeated TimeSeriesDataPoint mem_utilization_data = 16;  // Node memory utilization over time
}

// GetNodesResponse contains the list of nodes in a cluster.
message GetNodesResponse {
  repeated Node nodes = 1; // List of nodes.
}

// GetNamespacesResponse contains the list of namespaces in a cluster.
message GetNamespacesResponse {
  repeated Namespace namespaces = 1; // List of namespaces.
}

// GetResourcesResponse contains the list of resources in a namespace.
message GetResourcesResponse {
  repeated Resource resources = 1; // List of resources.
}

// GetNodeMetricsResponse contains the metrics for a specific node.
message GetNodeMetricsResponse {
  string node_id = 1; // Unique identifier for the node.
  string node_name = 2; // Name of the node.
  double cpu_capacity = 3; // CPU capacity of the node.
  double memory_capacity = 4; // Memory capacity of the node.
  repeated NodeMetric metrics = 5; // Time-series metrics for the node.
}

// GetPodMetricsResponse contains the metrics for a specific pod.
message GetPodMetricsResponse {
  string pod_id = 1; // Unique identifier for the pod.
  string pod_name = 2; // Name of the pod.
  string namespace = 3; // Namespace containing the pod.
  double cpu_limit = 4; // CPU limit for the pod.
  double memory_limit = 5; // Memory limit for the pod.
  repeated PodMetric metrics = 6; // Time-series metrics for the pod.
}

// GetNodeGroupsResponse contains the list of node groups with their nodes.
message GetNodeGroupsResponse {
  repeated NodeGroup node_groups = 1; // List of node groups.
}

// Resource Types

// Time series data point for utilization graphs
message TimeSeriesDataPoint {
  int64 timestamp = 1;  // Unix timestamp
  double value = 2;     // Value at this time point
}

// CNIPlugin represents a Container Network Interface plugin used in a cluster.
message CNIPlugin {
  string name = 1; // Name of the CNI plugin.
  string version = 2; // Version of the CNI plugin.
}

// Cluster represents a Kubernetes cluster.
message Cluster {
  // General info
  string id = 1; // Unique identifier for the cluster.
  string name = 2; // Name of the cluster.
  string cluster_api = 3; // API endpoint for the cluster.
  string version = 4; // Kubernetes version of the cluster.
  repeated CNIPlugin cni_plugins = 5; // CNI plugins used in the cluster.
  int32 node_count = 6; // Number of nodes in the cluster.
  int32 namespace_count = 7; // Number of namespaces in the cluster.
  int32 workload_count = 8; // Number of workloads in the cluster.
  int64 created_at = 9; // Timestamp when the cluster was created.
  int64 updated_at = 10; // Timestamp when the cluster was last updated.

   // Provider info
  string provider = 11; // Cloud provider (AWS, GCP, Azure)
  string region = 12; // Primary region of the cluster
  
  // Resource usage
  double total_cpu_capacity = 13; // Total CPU capacity in cores
  double total_memory_capacity = 14; // Total memory capacity in GB
  double cpu_usage = 15; // Current CPU usage in cores
  double memory_usage = 16; // Current memory usage in GB
  double cpu_utilization = 17; // CPU utilization percentage
  double memory_utilization = 18; // Memory utilization percentage
  
  // Cost information
  double cpu_cost_per_hour = 19; // Estimated CPU cost per hour
  double memory_cost_per_hour = 20; // Estimated memory cost per hour
  double total_cost_per_hour = 21; // Total estimated cost per hour
  double estimated_monthly_cost = 22; // Estimated monthly cost
}

// NodeGroup represents a group of Kubernetes nodes (e.g., AWS ASG, GCP MIG, etc.).
message NodeGroup {
  string name = 1; // Name of the node group.
  repeated Node nodes = 2; // Nodes belonging to this node group.
}

// Node represents a Kubernetes node.
message Node {
  string id = 1; // Unique identifier for the node.
  string name = 2; // Name of the node.
  string instance_type = 3; // Instance type of the node.
  string region = 4; // Region where the node is deployed.
  string zone = 5; // Zone where the node is deployed.
  bool ready = 6; // Whether the node is ready to accept workloads.
  double cpu_capacity = 7; // CPU capacity of the node.
  double memory_capacity = 8; // Memory capacity of the node.
  double cpu_utilization = 9; // Current CPU utilization of the node.
  double memory_utilization = 10; // Current memory utilization of the node.
  int32 pod_count = 11; // Number of pods running on the node.
  string architecture = 12; // Architecture of the node.
  string os = 13; // Operating system of the node.
  int64 created_at = 14; // Timestamp when the node was created.
  double cpu_cost_per_core = 15; // CPU cost per core
  double memory_cost_per_gb = 16; // Memory cost per GB
  double total_cost_per_hours = 17; // Total cost per hour for instance
}

// Namespace represents a Kubernetes namespace.
message Namespace {
  string name = 1; // Name of the namespace.
  string status = 2; // Status of the namespace.
  int32 deployments_count = 3; // Number of deployments in the namespace.
  int32 stateful_sets_count = 4; // Number of stateful sets in the namespace.
  int32 daemon_sets_count = 5; // Number of daemon sets in the namespace.
  int32 jobs_count = 6; // Number of jobs in the namespace.
  int32 cron_jobs_count = 7; // Number of cron jobs in the namespace.
  int32 pods_count = 8; // Number of pods in the namespace.
  int32 services_count = 9; // Number of services in the namespace.
  int32 ingresses_count = 10; // Number of ingresses in the namespace.
  string environment = 11; // Environment label of the namespace.
  string team = 12; // Team label of the namespace.
  int64 created_at = 13; // Timestamp when the namespace was created.
}

// Pod represents a Kubernetes pod.
message Pod {
  string id = 1; // Unique identifier for the pod.
  string name = 2; // Name of the pod.
  string status = 3; // Status of the pod.
  int64 created_at = 4; // Timestamp when the pod was created.
  double cpu_request = 5; // CPU request of the pod.
  double memory_request = 6; // Memory request of the pod.
  double cpu_usage = 7; // Current CPU usage of the pod.
  double memory_usage = 8; // Current memory usage of the pod.
  double cpu_limit = 9; // CPU limit of the pod.
  double memory_limit = 10; // Memory limit of the pod.
  float cpu_utilization_percentage = 11; // CPU usage as a percentage of request/limit.
  float memory_utilization_percentage = 12; // Memory usage as a percentage of request/limit.
}

// Resource represents a Kubernetes resource.
message Resource {
  string id = 1; // Unique identifier for the resource.
  string kind = 2; // Kind of the resource.
  string name = 3; // Name of the resource.
  string namespace = 4; // Namespace containing the resource.
  string app = 5; // Application label of the resource.
  string version = 6; // Version label of the resource.
  string status = 7; // Status of the resource.
  string environment = 8; // Environment label of the resource.
  int64 created_at = 9; // Timestamp when the resource was created.
  int64 updated_at = 10; // Timestamp when the resource was last updated.
  
  // Workload-specific fields
  int32 replica_count = 11; // Number of replicas for workload resources.
  repeated Pod pods = 12; // Pods for workload resources.
  int32 ready_replicas = 13; // Number of ready replicas for workload resources.
  
  // Resource usage fields
  double cpu_request = 20; // Current CPU request in millicores.
  double cpu_limit = 21; // Current CPU limit in millicores.
  double memory_request = 22; // Current memory request in bytes.
  double memory_limit = 23; // Current memory limit in bytes.
  
  // Current usage metrics
  double cpu_usage = 24; // Current CPU usage in millicores.
  double memory_usage = 25; // Current memory usage in bytes.
  float cpu_utilization_percentage = 26; // CPU usage as a percentage of request/limit.
  float memory_utilization_percentage = 27; // Memory usage as a percentage of request/limit.
  
  // Recommendation fields
  bool has_recommendation = 30; // Whether a recommendation is available.
  double recommended_cpu_request = 31; // Recommended CPU request in millicores.
  double recommended_cpu_limit = 32; // Recommended CPU limit in millicores.
  double recommended_memory_request = 33; // Recommended memory request in bytes.
  double recommended_memory_limit = 34; // Recommended memory limit in bytes.
  float cpu_savings_percentage = 35; // Potential CPU savings percentage.
  float memory_savings_percentage = 36; // Potential memory savings percentage.
  double total_cpu_saving_cores = 37; // Total CPU savings in cores across all replicas.
  double total_memory_saving_gb = 38; // Total memory savings in GB across all replicas.
}

// Metric types
// NodeMetric represents metrics for a node at a specific timestamp.
message NodeMetric {
  int64 timestamp = 1; // Timestamp when the metrics were collected.
  double cpu_usage = 2; // CPU usage of the node.
  double memory_usage = 3; // Memory usage of the node.
  double cpu_utilization = 4; // CPU utilization percentage of the node.
  double memory_utilization = 5; // Memory utilization percentage of the node.
}

// PodMetric represents metrics for a pod at a specific timestamp.
message PodMetric {
  int64 timestamp = 1; // Timestamp when the metrics were collected.
  double cpu_usage = 2; // CPU usage of the pod.
  double memory_usage = 3; // Memory usage of the pod.
  double cpu_utilization = 4; // CPU utilization percentage of the pod.
  double memory_utilization = 5; // Memory utilization percentage of the pod.
}

// Defines the service that provides RPC methods for Kubernetes cluster management and monitoring.
service K8SService {
  // GetClusters retrieves all clusters for a team.
  rpc GetClusters(GetClustersRequest) returns (GetClustersResponse);

  // GetCluster retrieves cluster details for a team.
  rpc GetCluster(GetClusterRequest) returns (GetClusterResponse);

  // GetClusterAnalytics get cluster analytics 
  rpc GetClusterAnalytics(GetClusterAnalyticsRequest) returns (GetClusterAnalyticsResponse) {}
  
  // GetNodes retrieves all nodes for a specific cluster.
  rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);

  // GetNodes retrieves all nodes for a specific cluster.
  rpc GetNodeGroups(GetNodeGroupsRequest) returns (GetNodeGroupsResponse);
  
  // GetNamespaces retrieves all namespaces for a specific cluster.
  rpc GetNamespaces(GetNamespacesRequest) returns (GetNamespacesResponse);
  
  // GetResources retrieves resources for a specific namespace, optionally filtered by kind.
  rpc GetResources(GetResourcesRequest) returns (GetResourcesResponse);
  
  // GetNodeMetrics retrieves time-series metrics for a specific node.
  rpc GetNodeMetrics(GetNodeMetricsRequest) returns (GetNodeMetricsResponse);
  
  // GetPodMetrics retrieves time-series metrics for a specific pod.
  rpc GetPodMetrics(GetPodMetricsRequest) returns (GetPodMetricsResponse);
}
