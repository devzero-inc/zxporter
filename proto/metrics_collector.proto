syntax = "proto3";

package api.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "io/prometheus/client/metrics.proto";

option go_package = "github.com/devzero-inc/services/dakr/gen/api/v1;gen";
option java_multiple_files = true;
option java_package = "gen.api.v1";

// EventType is a type of a event that can enter the system
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_ADD = 1;
  EVENT_TYPE_UPDATE = 2;
  EVENT_TYPE_DELETE = 3;
  EVENT_TYPE_METADATA = 4;
  EVENT_TYPE_METRICS = 5;
  EVENT_TYPE_CONTAINER_STARTED = 6;
  EVENT_TYPE_CONTAINER_STOPPED = 7;
  EVENT_TYPE_CONTAINER_RESTARTED = 8;
  EVENT_TYPE_CLUSTER_SNAPSHOT = 9;
}

// ResourceType is a type of resource that can enter the system
enum ResourceType {
  RESOURCE_TYPE_UNSPECIFIED = 0;
  
  // Core Resources
  RESOURCE_TYPE_NODE = 1;
  RESOURCE_TYPE_POD = 2;
  RESOURCE_TYPE_NAMESPACE = 3;
  RESOURCE_TYPE_EVENT = 4;
  RESOURCE_TYPE_ENDPOINTS = 5;
  RESOURCE_TYPE_SERVICE_ACCOUNT = 6;
  RESOURCE_TYPE_LIMIT_RANGE = 7;
  RESOURCE_TYPE_RESOURCE_QUOTA = 8;
  
  // Workload Resources
  RESOURCE_TYPE_DEPLOYMENT = 9;
  RESOURCE_TYPE_STATEFUL_SET = 10;
  RESOURCE_TYPE_DAEMON_SET = 11;
  RESOURCE_TYPE_REPLICA_SET = 12;
  RESOURCE_TYPE_REPLICATION_CONTROLLER = 13;
  RESOURCE_TYPE_JOB = 14;
  RESOURCE_TYPE_CRON_JOB = 15;
  
  // Storage Resources
  RESOURCE_TYPE_PERSISTENT_VOLUME_CLAIM = 16;
  RESOURCE_TYPE_PERSISTENT_VOLUME = 17;
  RESOURCE_TYPE_STORAGE_CLASS = 18;
  
  // Networking Resources
  RESOURCE_TYPE_SERVICE = 19;
  RESOURCE_TYPE_INGRESS = 20;
  RESOURCE_TYPE_INGRESS_CLASS = 21;
  RESOURCE_TYPE_NETWORK_POLICY = 22;
  
  // RBAC Resources
  RESOURCE_TYPE_ROLE = 23;
  RESOURCE_TYPE_ROLE_BINDING = 24;
  RESOURCE_TYPE_CLUSTER_ROLE = 25;
  RESOURCE_TYPE_CLUSTER_ROLE_BINDING = 26;
  
  // Autoscaling Resources
  RESOURCE_TYPE_HORIZONTAL_POD_AUTOSCALER = 27;
  RESOURCE_TYPE_VERTICAL_POD_AUTOSCALER = 28;
  
  // Policy Resources
  RESOURCE_TYPE_POD_DISRUPTION_BUDGET = 29;
  RESOURCE_TYPE_POD_SECURITY_POLICY = 30;
  
  // Custom Resources
  RESOURCE_TYPE_CUSTOM_RESOURCE_DEFINITION = 31;
  RESOURCE_TYPE_CUSTOM_RESOURCE = 32;
  
  // Configuration Resources
  RESOURCE_TYPE_CONFIG_MAP = 33;
  RESOURCE_TYPE_SECRET = 34;
  
  // Container and Resource specific types
  RESOURCE_TYPE_CONTAINER = 35;
  RESOURCE_TYPE_NODE_RESOURCE = 36;
  RESOURCE_TYPE_CONTAINER_RESOURCE = 37;

  // Cluster resource - registration type
  RESOURCE_TYPE_CLUSTER = 38;

  // CSINode type
  RESOURCE_TYPE_CSI_NODE = 39;

  // Karpenter type
  RESOURCE_TYPE_KARPENTER = 40;

  // Datadog type
  RESOURCE_TYPE_DATADOG = 41;

  // Argo rollouts type
  RESOURCE_TYPE_ARGO_ROLLOUTS = 42;

  // Keda type - Leaving this as a reserve now, not really sure if we actually need it
  RESOURCE_TYPE_KEDA = 43;

  // Keda scaled object type
  RESOURCE_TYPE_KEDA_SCALED_OBJECT = 44;

  // Keda scaled job type
  RESOURCE_TYPE_KEDA_SCALED_JOB = 45;
}

// ResourceItem contains the data for a single resource event.
message ResourceItem {
  // Unique identifier for the resource (optional, might be derived from data)
  string key = 1;

  // Timestamp when the resource was collected
  google.protobuf.Timestamp timestamp = 2;

  // Event type (add, update, delete, metrics, etc.)
  EventType event_type = 3;

  // The actual resource data as a flexible structure
  google.protobuf.Struct data = 4;

  // Type of resource (pod, container, node_resources, etc.)
  ResourceType resource_type = 5;
}

// Requests
// SendRequest is used to push metrics for a single resource.
message SendResourceRequest {
  // Type of resource (pod, container, node_resources, etc.)
  ResourceType resource_type = 1;

  // Unique identifier for the resource
  string key = 2;

  // Timestamp when the resource was collected
  google.protobuf.Timestamp timestamp = 3;

  // Event type (add, update, delete, metrics, etc.)
  EventType event_type = 4;

  // The actual resource data as a flexible structure
  google.protobuf.Struct data = 5;

  // cluster_id of resource
  string cluster_id = 6;

  // team_id of resource
  string team_id = 7;
}

// SendResourceBatchRequest is used to push metrics for multiple resources of the same type.
message SendResourceBatchRequest {
  // The list of resources to process
  repeated ResourceItem resources = 1;

  // cluster_id of resources - all resources in the batch must belong to this cluster
  string cluster_id = 2;
  
  // team_id of resources - all resources in the batch must belong to this team
  string team_id = 3;
}

// Responses
// Common response for all send operations
message SendResourceResponse {
  // Type of resource (pod, container, node_resources, etc.)
  ResourceType resource_type = 1;

  // Unique identifier for the cluster
  string cluster_identifier = 2;
}

// Response for batch send operations
message SendResourceBatchResponse {
  // Type of resource (pod, container, node_resources, etc.)
  ResourceType resource_type = 1;
  
  // Unique identifier for the cluster
  string cluster_identifier = 2;
  
  // Number of resources successfully processed
  int32 processed_count = 3;
}

// SendTelemetryMetricsRequest is used to send telemetry metrics from a cluster
message SendTelemetryMetricsRequest {
  // Unique identifier for the cluster
  string cluster_id = 1;
  
  // Collection of metrics
  repeated io.prometheus.client.MetricFamily metric_families = 2;
}

// SendTelemetryMetricsResponse is the response for telemetry metrics submission
message SendTelemetryMetricsResponse {
  // Unique identifier for the cluster
  string cluster_id = 1;
  
  // Number of metrics successfully processed
  int32 processed_count = 2;
}

// Defines the service that provides RPC methods for Kubernetes cluster monitoring metrics collector.
service MetricsCollectorService {
  // SendResource pushes a single metric for a resource.
  rpc SendResource(SendResourceRequest) returns (SendResourceResponse);
  
  // SendResourceBatch pushes multiple metrics for resources of the same type.
  rpc SendResourceBatch(SendResourceBatchRequest) returns (SendResourceBatchResponse);
  
  // SendTelemetryMetrics pushes a batch of telemetry metrics (gauges, counters, histograms) from a cluster.
  rpc SendTelemetryMetrics(SendTelemetryMetricsRequest) returns (SendTelemetryMetricsResponse);
}
