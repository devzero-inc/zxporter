name: Kubernetes Compatibility Test

on:
  workflow_dispatch:
  pull_request:

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}
      testserver_img: ${{ steps.set-image.outputs.testserver_img }}
    
    steps:
      - name: Set Docker image names
        id: set-image
        run: |
          ZXPORTER_IMG="ttl.sh/$(uuidgen):2h"
          TESTSERVER_IMG="ttl.sh/$(uuidgen):2h"
          echo "ZXPORTER_IMG=$ZXPORTER_IMG" >> $GITHUB_ENV
          echo "TESTSERVER_IMG=$TESTSERVER_IMG" >> $GITHUB_ENV
          echo "image=$ZXPORTER_IMG" >> $GITHUB_OUTPUT
          echo "testserver_img=$TESTSERVER_IMG" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build and push Docker images
        run: |
          echo "Building and pushing zxporter image: ${{ env.ZXPORTER_IMG }}"
          make docker-build docker-push IMG=${{ env.ZXPORTER_IMG }}
          
          echo "Building and pushing testserver image: ${{ env.TESTSERVER_IMG }}"
          make testserver-docker-build testserver-docker-push TESTSERVER_IMG=${{ env.TESTSERVER_IMG }}

  test:
    name: Test on K8s ${{ matrix.k8s-version }}
    needs: build
    runs-on: ubuntu-xl
    
    strategy:
      fail-fast: false
      matrix:
        k8s-version:
          - v1.25.16
          - v1.26.15
          - v1.27.16
          - v1.28.15
          - v1.29.14
          - v1.30.8
          - v1.31.6
          - v1.32.3

    steps:
      - name: Set Docker image names
        run: |
          echo "ZXPORTER_IMG=${{ needs.build.outputs.image }}" >> $GITHUB_ENV
          echo "TESTSERVER_IMG=${{ needs.build.outputs.testserver_img }}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          version: v0.27.0
          node_image: kindest/node:${{ matrix.k8s-version }}
          cluster_name: kind-${{ matrix.k8s-version }}
          wait: 120s

      - name: Install Metrics Server
        run: |
          helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
          helm repo update
          helm upgrade --install --set args={--kubelet-insecure-tls} metrics-server metrics-server/metrics-server --namespace kube-system

      - name: Install Node Exporter
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts 
          helm repo update
          helm install node-exporter prometheus-community/prometheus-node-exporter

      - name: Deploy testserver to Kubernetes
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace devzero-zxporter --dry-run=client -o yaml | kubectl apply -f -
          
          # Replace the image placeholder in the testserver Kubernetes manifest
          sed "s|\${TESTSERVER_IMG}|${{ env.TESTSERVER_IMG }}|g" test/testserver/kubernetes.yaml > testserver-k8s.yaml
          
          # Apply the testserver Kubernetes manifest
          kubectl apply -f testserver-k8s.yaml
          
          # Wait for the testserver pod to be ready
          echo "Waiting for testserver pod to be ready..."
          kubectl wait --for=condition=ready pod -l app=testserver -n devzero-zxporter --timeout=120s
          
          # Get the testserver pod name
          TESTSERVER_POD=$(kubectl get pods -n devzero-zxporter -l app=testserver -o jsonpath='{.items[0].metadata.name}')
          echo "Testserver pod: $TESTSERVER_POD"
          
          # Check the testserver logs
          echo "Testserver logs:"
          kubectl logs $TESTSERVER_POD -n devzero-zxporter

      - name: Deploy ZXporter with custom DAKR_URL
        run: |
          # Set DAKR_URL to point to the testserver service in the same namespace
          echo "Setting DAKR_URL to http://testserver.devzero-zxporter.svc.cluster.local:50051"
          make deploy IMG=${{ env.ZXPORTER_IMG }} DAKR_URL=http://testserver.devzero-zxporter.svc.cluster.local:50051

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/devzero-zxporter-controller-manager -n devzero-zxporter || true
          
          echo "Getting pod status..."
          kubectl get pods -n devzero-zxporter -o wide
          
          echo "Describing deployment..."
          kubectl describe deployment devzero-zxporter-controller-manager -n devzero-zxporter
          
          echo "Getting pod details..."
          POD_NAME=$(kubectl get pods -n devzero-zxporter -l control-plane=controller-manager -o jsonpath='{.items[0].metadata.name}')
          kubectl describe pod $POD_NAME -n devzero-zxporter
          
          echo "Getting events for the namespace..."
          kubectl get events -n devzero-zxporter --sort-by='.lastTimestamp'
          
          echo "Checking node status..."
          kubectl describe nodes
          
          echo "Checking node resources..."
          kubectl get nodes -o custom-columns=NAME:.metadata.name,CPU:.status.capacity.cpu,MEMORY:.status.capacity.memory

      - name: Verify ZXporter is running
        run: |
          echo "Getting all devzero resource status..."
          kubectl get all -n devzero-zxporter -o wide
          
          echo "Getting pod logs (if any)..."
          POD_NAME=$(kubectl get pods -n devzero-zxporter -l control-plane=controller-manager -o jsonpath='{.items[0].metadata.name}')
          kubectl logs $POD_NAME -n devzero-zxporter --tail=100 || echo "No logs available"
          
          echo "Getting pod events..."
          kubectl get events -n devzero-zxporter --field-selector involvedObject.name=$POD_NAME --sort-by='.lastTimestamp'

      - name: Wait for data collection (2 minutes)
        run: |
          echo "Waiting for 2 minutes to collect data from ZXporter..."
          sleep 120

          echo "Getting pod logs (if any)..."
          POD_NAME=$(kubectl get pods -n devzero-zxporter -l control-plane=controller-manager -o jsonpath='{.items[0].metadata.name}')
          kubectl logs $POD_NAME -n devzero-zxporter --tail=100 || echo "No logs available"
          kubectl logs -n devzero-zxporter -l app.kubernetes.io/name=prometheus --all-containers


      - name: Debug Prometheus status and logs
        run: |
          PROM_POD=$(kubectl get pod -n devzero-zxporter -l app.kubernetes.io/name=prometheus,app.kubernetes.io/component=server -o jsonpath='{.items[0].metadata.name}')
          echo "Prometheus Pod: $PROM_POD"
        
          echo "Describing Prometheus pod..."
          kubectl describe pod $PROM_POD -n devzero-zxporter || echo "Describe failed"
        
          echo "Getting logs from Prometheus containers..."
          kubectl logs $PROM_POD -n devzero-zxporter -c prometheus-server || echo "No prometheus-server logs"
          kubectl logs $PROM_POD -n devzero-zxporter -c prometheus-server-configmap-reload || echo "No configmap-reload logs"
        
          echo "Spawning debug pod to test Prometheus readiness endpoint..."

          # Create a temporary curl pod
          kubectl run curlbox \
            -n devzero-zxporter \
            --image=curlimages/curl:latest \
            --restart=Never \
            --command -- sleep 120

          # Wait for it to be ready
          kubectl wait --for=condition=Ready pod/curlbox -n devzero-zxporter --timeout=30s

          # Run curl against the Prometheus /-/ready endpoint
          kubectl exec -n devzero-zxporter curlbox -- \
            curl -v http://prometheus-server.devzero-zxporter.svc.cluster.local:80/-/ready || echo "Prometheus not responding to /-/ready"

          # Clean up
          kubectl delete pod curlbox -n devzero-zxporter --ignore-not-found

          echo "Checking Prometheus config mounted in pod..."
          kubectl exec -n devzero-zxporter $PROM_POD -c prometheus-server -- cat /etc/config/prometheus.yml || echo "Could not read prometheus.yml"        
        
      - name: Check testserver output
        run: |
          echo "Checking testserver output..."
          
          # Get the testserver pod name
          TESTSERVER_POD=$(kubectl get pods -n devzero-zxporter -l app=testserver -o jsonpath='{.items[0].metadata.name}')
          echo "Testserver pod: $TESTSERVER_POD"
          
          # Display the testserver logs
          echo "=== TESTSERVER LOGS ==="
          kubectl logs $TESTSERVER_POD -n devzero-zxporter
          echo "=== END TESTSERVER LOGS ==="
          
          # Copy the requests.json file from the pod
          echo "Copying requests.json from the pod..."
          kubectl cp devzero-zxporter/$TESTSERVER_POD:/data/requests.json ./pod-requests.json || echo "Failed to copy requests.json from pod"
          
          # Display the requests file content
          echo "=== REQUESTS FILE CONTENT ==="
          cat pod-requests.json || echo "No pod-requests.json file found"
          echo "=== END REQUESTS FILE CONTENT ==="
          
          # Check if there was any output in the requests file
          if [ -s pod-requests.json ]; then
            echo "Testserver received data from ZXporter!"
          else
            echo "ERROR: No data received by testserver from ZXporter!"
            exit 1
          fi
