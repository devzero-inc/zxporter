name: Build and Deploy

on: [pull_request, push, workflow_dispatch]

jobs:
  build-and-deploy:
    strategy:
      matrix:
        k8s-version: ['1.29.0', '1.30.0', '1.31.0', '1.32.0']
      fail-fast: false  # Continue with other versions if one fails
    
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    env:
      REGISTRY_PORT: 5000
    
    name: Test with Kubernetes ${{ matrix.k8s-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Install dependencies
        run: |
          # Install bats
          sudo apt-get update
          sudo apt-get install -y bats

          # Install kind
          curl -sLo kind "$(curl -sL https://api.github.com/repos/kubernetes-sigs/kind/releases/latest | jq -r '[.assets[] | select(.name == "kind-linux-amd64")] | first | .browser_download_url')"
          chmod +x kind
          sudo mv kind /bin/

          # Install kubectl
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /bin/

      - name: Create Kubernetes cluster
        run: |
          # Modify kind config to use specific k8s version
          cat > kind-config-with-version.yaml << EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            image: kindest/node:v${{ matrix.k8s-version }}
          - role: worker
            image: kindest/node:v${{ matrix.k8s-version }}
          containerdConfigPatches:
          - |-
            [plugins."io.containerd.grpc.v1.cri".registry]
              config_path = "/etc/containerd/certs.d"
          EOF
          
          kind create cluster --config=kind-config-with-version.yaml
          kind export kubeconfig

      - name: Install Prometheus on the cluster
        run: |
          kubectl create namespace monitoring
          kubectl apply -f ./test/prometheus/clusterRole.yaml
          kubectl apply -f ./test/prometheus/config-map.yaml
          kubectl apply -f ./test/prometheus/deployment.yaml
          kubectl apply -f ./test/prometheus/service.yaml

      - name: Wait for prometheus to be ready
        run: ./test/wait_for_deployment.sh prometheus-deployment monitoring

      - name: Connect the registry to the Kind network
        id: connect-registry
        run: |
          REGISTRY_ID=$(docker ps -qf "ancestor=registry:2")
          REGISTRY_NAME=$(docker inspect -f '{{.Name}}' $REGISTRY_ID | sed 's/\///')
          echo "REGISTRY_NAME=$REGISTRY_NAME" >> $GITHUB_ENV
          ./test/configure_local_registry.sh
        env:
          REGISTRY_PORT: ${{ env.REGISTRY_PORT }}
          REGISTRY_NAME: ${{ env.REGISTRY_NAME }}

      - name: Build and push operator image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: localhost:5000/resource-adj-operator:ci
  
      # - name: Build and push test-app image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./test/test-app
      #     push: true
      #     tags: localhost:5000/test-app:ci

      # - name: Build and push inc-test-app image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./test/inc-test-app
      #     push: true
      #     tags: localhost:5000/inc-load:ci

      # - name: Build and push dec-test-app image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./test/dec-test-app
      #     push: true
      #     tags: localhost:5000/dec-load:ci

      # - name: Build and push frequency-test-app-1 image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./test/frequency-test-app-1
      #     push: true
      #     tags: localhost:5000/frequency-test-app-1:ci
      
      - name: Build and push stress-test image
        uses: docker/build-push-action@v6
        with:
          context: ./test/burst-test
          push: true
          tags: localhost:5000/stress-test:ci

      # - name: Deploy recommendation test apps to Kubernetes
      #   run: |
      #     kubectl apply -f ./test/test-app/deployment.yaml
      #     kubectl apply -f ./test/inc-test-app/inc-load-deploy.yaml
      #     kubectl apply -f ./test/dec-test-app/dec-load-deploy.yaml

      # - name: Wait for test-app deployments to be ready
      #   run: ./test/wait_for_deployment.sh test-app default

      # - name: Wait for inc-test-app deployments to be ready
      #   run: ./test/wait_for_deployment.sh inc-load default

      # - name: Wait for dec-test-app deployments to be ready
      #   run: ./test/wait_for_deployment.sh dec-load default

      - name: Deploy operator to Kubernetes
        run: |
          make install
          make deploy IMG=localhost:5000/resource-adj-operator:ci
          kubectl apply -f ./test/test_apps_v1_resourceadjustmentpolicy.yaml

      - name: Wait for deployments to be ready
        run: ./test/wait_for_deployment.sh resource-adjustment-operator-controller-manager resource-adjustment-operator-system

      - name: Check resources
        run: kubectl get all -n resource-adjustment-operator-system

      - name: Sleep for 2 minute before running tests to get good recommendations
        run: sleep 120
        
      # - name: Run recommendation tests
      #   run: |
      #     sudo -E bats -f "test_resource_adjustment_recommendations" test/tests.bats
      #     sudo -E bats -f "test_increasing_load_recommendations" test/tests.bats
      #     sudo -E bats -f "test_decreasing_load_recommendations" test/tests.bats
      
      # - name: Deploy frequency test app to kubernetes
      #   run: |
      #     kubectl apply -f ./test/frequency-test-app-1/deployment.yaml

      # - name: Run frequency tests
      #   run: |
      #     sudo -E bats -f "test_frequency_changes" test/tests.bats

      - name: Deploy burst test app to kubernetes
        run: |
          kubectl apply -f ./test/burst-test/deployment.yaml

      - name: Wait for burst-test deployment to be ready
        run: ./test/wait_for_deployment.sh stress-test default
      
      - name: sleep for 110s to start the application
        run: sleep 110
  
      - name: Run burst tests
        run: |
          sudo -E CONTAINER_NAME=stress-test bats -f "test_stress_container_recommendations" test/tests.bats
