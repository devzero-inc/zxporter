name: 'Push zxporter to Docker Hub'

on:
  workflow_dispatch:
    inputs:
      push_latest:
        description: 'Push latest tag'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  package-and-push:
    name: Package & Push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Version Info
        id: version
        run: |
          GITVERSION=$(git describe --tags --always || echo "v0.0.0-$(git rev-parse --short HEAD)")
          echo "GITVERSION=${GITVERSION}" >> $GITHUB_ENV
          if [[ "$GITVERSION" =~ ^v([0-9]+)\.([0-9]+)\.(.+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            PATCH_SHORT=${PATCH%%[-]*}
            FULLV=v${MAJOR}.${MINOR}.${PATCH_SHORT}
      
            echo "MAJOR=${MAJOR}" >> $GITHUB_ENV
            echo "MINOR=${MINOR}" >> $GITHUB_ENV
            echo "PATCH=${PATCH}" >> $GITHUB_ENV
            echo "PATCH_SHORT=${PATCH_SHORT}" >> $GITHUB_ENV
            echo "FULLV=${FULLV}" >> $GITHUB_ENV
            echo "IS_RELEASE=true" >> $GITHUB_ENV

            echo "Debug: MAJOR=${BASH_REMATCH[1]}, MINOR=${BASH_REMATCH[2]}, PATCH=${PATCH}, PATCH_SHORT=${PATCH_SHORT}"
            echo "Debug: FULLV=${FULLV}"
          else
            echo "MAJOR=0" >> $GITHUB_ENV
            echo "MINOR=0" >> $GITHUB_ENV
            echo "PATCH=0" >> $GITHUB_ENV
            echo "FULLV=v0.0.0" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_ZXPORTER_BALANCE_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ZXPORTER_BALANCE_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set build metadata
        run: |
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TREE_STATE=clean" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Check existing tags and validate
        id: validate_tags
        env:
          GITVERSION: ${{ env.GITVERSION }}
          FULLV: ${{ env.FULLV }}
          IS_RELEASE: ${{ env.IS_RELEASE }}
          PUSH_LATEST: ${{ inputs.push_latest || false }}
        run: |
          # Function to check if a Docker tag exists in registry
          check_tag_exists() {
            local tag=$1
            echo "Checking if tag '$tag' exists in registry..."
            
            # Use docker manifest inspect to check if tag exists
            if docker manifest inspect devzeroinc/zxporter:$tag >/dev/null 2>&1; then
              echo "Tag '$tag' exists in registry"
              return 0
            else
              echo "Tag '$tag' does not exist in registry"
              return 1
            fi
          }

          # Build the list of tags that will be created
          TAGS=("$GITVERSION")

          if [[ "$PUSH_LATEST" == "true" ]]; then
            TAGS+=("latest")
          fi

          if [[ "$IS_RELEASE" == "true" ]]; then
            TAGS+=("$FULLV")
          fi

          echo "Tags to be processed: ${TAGS[@]}"

          # Check existing tags 
          EXISTING_TAGS=()
          for tag in "${TAGS[@]}"; do
            if check_tag_exists "$tag"; then
              EXISTING_TAGS+=("$tag")
            fi
          done

          # Handle existing tags
          if [ ${#EXISTING_TAGS[@]} -gt 0 ]; then
            echo "Found existing tags: ${EXISTING_TAGS[@]}"
            
            # Check if any non-latest tags exist
            NON_LATEST_EXISTING=()
            for tag in "${EXISTING_TAGS[@]}"; do
              if [[ "$tag" != "latest" ]]; then
                NON_LATEST_EXISTING+=("$tag")
              fi
            done

            # Definately have to fail if any non-latest tags exist
            if [ ${#NON_LATEST_EXISTING[@]} -gt 0 ]; then
              echo "ERROR: The following tags already exist in the registry and cannot be overridden:"
              printf '  - %s\n' "${NON_LATEST_EXISTING[@]}"
              echo ""
              echo "To avoid accidentally overriding existing images, this build is being stopped."
              echo "If you need to rebuild these tags, please delete them from the registry first."
              exit 1
            fi

            # check latest tag to push or not
            for tag in "${EXISTING_TAGS[@]}"; do
              if [[ "$tag" == "latest" ]]; then
                if [[ "$PUSH_LATEST" != "true" ]]; then
                  echo "ERROR: The 'latest' tag already exists in the registry."
                  echo "To override the 'latest' tag, you must set 'push_latest' to true in the workflow dispatch."
                  echo "Current push_latest value: $PUSH_LATEST"
                  exit 1
                else
                  echo "WARNING: The 'latest' tag exists but will be overridden because push_latest=true"
                fi
              fi
            done
          fi

          echo "Tag validation passed. Proceeding with build..."
          
          # Export validated tags for the next step
          TAGS_STRING="${TAGS[*]}"
          echo "VALIDATED_TAGS=${TAGS_STRING}" >> $GITHUB_OUTPUT
          echo "Validated tags to build: ${TAGS_STRING}"

      - name: Build and push multi-arch images
        env:
          MAJOR: ${{ env.MAJOR }}
          MINOR: ${{ env.MINOR }}
          PATCH: ${{ env.PATCH }}
          GITVERSION: ${{ env.GITVERSION }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
          GIT_TREE_STATE: ${{ env.GIT_TREE_STATE }}
          BUILD_DATE: ${{ env.BUILD_DATE }}
          VALIDATED_TAGS: ${{ steps.validate_tags.outputs.VALIDATED_TAGS }}
        run: |
          # Use the validated tags from the previous step
          read -ra TAGS <<< "$VALIDATED_TAGS"
          
          echo "Building and pushing validated tags: ${TAGS[@]}"

          for tag in "${TAGS[@]}"; do
            echo "Building and pushing tag: $tag"
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              -t devzeroinc/zxporter:$tag \
              --build-arg TARGETOS \
              --build-arg TARGETARCH \
              --build-arg MAJOR=$MAJOR \
              --build-arg MINOR=$MINOR \
              --build-arg PATCH=$PATCH \
              --build-arg GITVERSION=$GITVERSION \
              --build-arg COMMIT_HASH=$COMMIT_HASH \
              --build-arg GIT_TREE_STATE=$GIT_TREE_STATE \
              --build-arg BUILD_DATE=$BUILD_DATE \
              .
          done

          echo "Successfully built and pushed all validated tags: ${TAGS[@]}"
