// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/dxi.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DxiService_GetInsights_FullMethodName = "/api.v1.DxiService/GetInsights"
)

// DxiServiceClient is the client API for DxiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DxiServiceClient interface {
	// GetInsights retrieves metrics, insights, and actionable recommendations for a team.
	GetInsights(ctx context.Context, in *GetInsightsRequest, opts ...grpc.CallOption) (*GetInsightsResponse, error)
}

type dxiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDxiServiceClient(cc grpc.ClientConnInterface) DxiServiceClient {
	return &dxiServiceClient{cc}
}

func (c *dxiServiceClient) GetInsights(ctx context.Context, in *GetInsightsRequest, opts ...grpc.CallOption) (*GetInsightsResponse, error) {
	out := new(GetInsightsResponse)
	err := c.cc.Invoke(ctx, DxiService_GetInsights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DxiServiceServer is the server API for DxiService service.
// All implementations must embed UnimplementedDxiServiceServer
// for forward compatibility
type DxiServiceServer interface {
	// GetInsights retrieves metrics, insights, and actionable recommendations for a team.
	GetInsights(context.Context, *GetInsightsRequest) (*GetInsightsResponse, error)
	mustEmbedUnimplementedDxiServiceServer()
}

// UnimplementedDxiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDxiServiceServer struct {
}

func (UnimplementedDxiServiceServer) GetInsights(context.Context, *GetInsightsRequest) (*GetInsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsights not implemented")
}
func (UnimplementedDxiServiceServer) mustEmbedUnimplementedDxiServiceServer() {}

// UnsafeDxiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DxiServiceServer will
// result in compilation errors.
type UnsafeDxiServiceServer interface {
	mustEmbedUnimplementedDxiServiceServer()
}

func RegisterDxiServiceServer(s grpc.ServiceRegistrar, srv DxiServiceServer) {
	s.RegisterService(&DxiService_ServiceDesc, srv)
}

func _DxiService_GetInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DxiServiceServer).GetInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DxiService_GetInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DxiServiceServer).GetInsights(ctx, req.(*GetInsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DxiService_ServiceDesc is the grpc.ServiceDesc for DxiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DxiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DxiService",
	HandlerType: (*DxiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInsights",
			Handler:    _DxiService_GetInsights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/dxi.proto",
}
