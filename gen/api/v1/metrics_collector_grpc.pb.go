// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/metrics_collector.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsCollectorService_SendResource_FullMethodName = "/api.v1.MetricsCollectorService/SendResource"
)

// MetricsCollectorServiceClient is the client API for MetricsCollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsCollectorServiceClient interface {
	// SendResource pushes a single metric for a resource.
	SendResource(ctx context.Context, in *SendResourceRequest, opts ...grpc.CallOption) (*SendResourceResponse, error)
}

type metricsCollectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsCollectorServiceClient(cc grpc.ClientConnInterface) MetricsCollectorServiceClient {
	return &metricsCollectorServiceClient{cc}
}

func (c *metricsCollectorServiceClient) SendResource(ctx context.Context, in *SendResourceRequest, opts ...grpc.CallOption) (*SendResourceResponse, error) {
	out := new(SendResourceResponse)
	err := c.cc.Invoke(ctx, MetricsCollectorService_SendResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsCollectorServiceServer is the server API for MetricsCollectorService service.
// All implementations must embed UnimplementedMetricsCollectorServiceServer
// for forward compatibility
type MetricsCollectorServiceServer interface {
	// SendResource pushes a single metric for a resource.
	SendResource(context.Context, *SendResourceRequest) (*SendResourceResponse, error)
	mustEmbedUnimplementedMetricsCollectorServiceServer()
}

// UnimplementedMetricsCollectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsCollectorServiceServer struct {
}

func (UnimplementedMetricsCollectorServiceServer) SendResource(context.Context, *SendResourceRequest) (*SendResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResource not implemented")
}
func (UnimplementedMetricsCollectorServiceServer) mustEmbedUnimplementedMetricsCollectorServiceServer() {
}

// UnsafeMetricsCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsCollectorServiceServer will
// result in compilation errors.
type UnsafeMetricsCollectorServiceServer interface {
	mustEmbedUnimplementedMetricsCollectorServiceServer()
}

func RegisterMetricsCollectorServiceServer(s grpc.ServiceRegistrar, srv MetricsCollectorServiceServer) {
	s.RegisterService(&MetricsCollectorService_ServiceDesc, srv)
}

func _MetricsCollectorService_SendResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsCollectorServiceServer).SendResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsCollectorService_SendResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsCollectorServiceServer).SendResource(ctx, req.(*SendResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsCollectorService_ServiceDesc is the grpc.ServiceDesc for MetricsCollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsCollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.MetricsCollectorService",
	HandlerType: (*MetricsCollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendResource",
			Handler:    _MetricsCollectorService_SendResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/metrics_collector.proto",
}
