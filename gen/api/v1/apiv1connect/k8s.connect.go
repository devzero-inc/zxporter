// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/k8s.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/devzero-inc/zxporter/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// K8SServiceName is the fully-qualified name of the K8SService service.
	K8SServiceName = "api.v1.K8SService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// K8SServiceGetClustersProcedure is the fully-qualified name of the K8SService's GetClusters RPC.
	K8SServiceGetClustersProcedure = "/api.v1.K8SService/GetClusters"
	// K8SServiceGetClusterProcedure is the fully-qualified name of the K8SService's GetCluster RPC.
	K8SServiceGetClusterProcedure = "/api.v1.K8SService/GetCluster"
	// K8SServiceGetClusterAnalyticsProcedure is the fully-qualified name of the K8SService's
	// GetClusterAnalytics RPC.
	K8SServiceGetClusterAnalyticsProcedure = "/api.v1.K8SService/GetClusterAnalytics"
	// K8SServiceGetClusterCostAnalysisProcedure is the fully-qualified name of the K8SService's
	// GetClusterCostAnalysis RPC.
	K8SServiceGetClusterCostAnalysisProcedure = "/api.v1.K8SService/GetClusterCostAnalysis"
	// K8SServiceGetNodesProcedure is the fully-qualified name of the K8SService's GetNodes RPC.
	K8SServiceGetNodesProcedure = "/api.v1.K8SService/GetNodes"
	// K8SServiceGetNodeGroupsProcedure is the fully-qualified name of the K8SService's GetNodeGroups
	// RPC.
	K8SServiceGetNodeGroupsProcedure = "/api.v1.K8SService/GetNodeGroups"
	// K8SServiceGetNamespacesProcedure is the fully-qualified name of the K8SService's GetNamespaces
	// RPC.
	K8SServiceGetNamespacesProcedure = "/api.v1.K8SService/GetNamespaces"
	// K8SServiceGetResourcesProcedure is the fully-qualified name of the K8SService's GetResources RPC.
	K8SServiceGetResourcesProcedure = "/api.v1.K8SService/GetResources"
	// K8SServiceGetNodeMetricsProcedure is the fully-qualified name of the K8SService's GetNodeMetrics
	// RPC.
	K8SServiceGetNodeMetricsProcedure = "/api.v1.K8SService/GetNodeMetrics"
	// K8SServiceGetPodMetricsProcedure is the fully-qualified name of the K8SService's GetPodMetrics
	// RPC.
	K8SServiceGetPodMetricsProcedure = "/api.v1.K8SService/GetPodMetrics"
)

// K8SServiceClient is a client for the api.v1.K8SService service.
type K8SServiceClient interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error)
	// GetCluster retrieves cluster details for a team.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// GetClusterAnalytics get cluster analytics
	GetClusterAnalytics(context.Context, *connect.Request[v1.GetClusterAnalyticsRequest]) (*connect.Response[v1.GetClusterAnalyticsResponse], error)
	// GetClusterCostAnalysis returns cost analysis
	GetClusterCostAnalysis(context.Context, *connect.Request[v1.GetClusterCostAnalysisRequest]) (*connect.Response[v1.GetClusterCostAnalysisResponse], error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodes(context.Context, *connect.Request[v1.GetNodesRequest]) (*connect.Response[v1.GetNodesResponse], error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error)
	// GetNamespaces retrieves all namespaces for a specific cluster.
	GetNamespaces(context.Context, *connect.Request[v1.GetNamespacesRequest]) (*connect.Response[v1.GetNamespacesResponse], error)
	// GetResources retrieves resources for a specific namespace, optionally filtered by kind.
	GetResources(context.Context, *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error)
	// GetNodeMetrics retrieves time-series metrics for a specific node.
	GetNodeMetrics(context.Context, *connect.Request[v1.GetNodeMetricsRequest]) (*connect.Response[v1.GetNodeMetricsResponse], error)
	// GetPodMetrics retrieves time-series metrics for a specific pod.
	GetPodMetrics(context.Context, *connect.Request[v1.GetPodMetricsRequest]) (*connect.Response[v1.GetPodMetricsResponse], error)
}

// NewK8SServiceClient constructs a client for the api.v1.K8SService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewK8SServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) K8SServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &k8SServiceClient{
		getClusters: connect.NewClient[v1.GetClustersRequest, v1.GetClustersResponse](
			httpClient,
			baseURL+K8SServiceGetClustersProcedure,
			opts...,
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.GetClusterResponse](
			httpClient,
			baseURL+K8SServiceGetClusterProcedure,
			opts...,
		),
		getClusterAnalytics: connect.NewClient[v1.GetClusterAnalyticsRequest, v1.GetClusterAnalyticsResponse](
			httpClient,
			baseURL+K8SServiceGetClusterAnalyticsProcedure,
			opts...,
		),
		getClusterCostAnalysis: connect.NewClient[v1.GetClusterCostAnalysisRequest, v1.GetClusterCostAnalysisResponse](
			httpClient,
			baseURL+K8SServiceGetClusterCostAnalysisProcedure,
			opts...,
		),
		getNodes: connect.NewClient[v1.GetNodesRequest, v1.GetNodesResponse](
			httpClient,
			baseURL+K8SServiceGetNodesProcedure,
			opts...,
		),
		getNodeGroups: connect.NewClient[v1.GetNodeGroupsRequest, v1.GetNodeGroupsResponse](
			httpClient,
			baseURL+K8SServiceGetNodeGroupsProcedure,
			opts...,
		),
		getNamespaces: connect.NewClient[v1.GetNamespacesRequest, v1.GetNamespacesResponse](
			httpClient,
			baseURL+K8SServiceGetNamespacesProcedure,
			opts...,
		),
		getResources: connect.NewClient[v1.GetResourcesRequest, v1.GetResourcesResponse](
			httpClient,
			baseURL+K8SServiceGetResourcesProcedure,
			opts...,
		),
		getNodeMetrics: connect.NewClient[v1.GetNodeMetricsRequest, v1.GetNodeMetricsResponse](
			httpClient,
			baseURL+K8SServiceGetNodeMetricsProcedure,
			opts...,
		),
		getPodMetrics: connect.NewClient[v1.GetPodMetricsRequest, v1.GetPodMetricsResponse](
			httpClient,
			baseURL+K8SServiceGetPodMetricsProcedure,
			opts...,
		),
	}
}

// k8SServiceClient implements K8SServiceClient.
type k8SServiceClient struct {
	getClusters            *connect.Client[v1.GetClustersRequest, v1.GetClustersResponse]
	getCluster             *connect.Client[v1.GetClusterRequest, v1.GetClusterResponse]
	getClusterAnalytics    *connect.Client[v1.GetClusterAnalyticsRequest, v1.GetClusterAnalyticsResponse]
	getClusterCostAnalysis *connect.Client[v1.GetClusterCostAnalysisRequest, v1.GetClusterCostAnalysisResponse]
	getNodes               *connect.Client[v1.GetNodesRequest, v1.GetNodesResponse]
	getNodeGroups          *connect.Client[v1.GetNodeGroupsRequest, v1.GetNodeGroupsResponse]
	getNamespaces          *connect.Client[v1.GetNamespacesRequest, v1.GetNamespacesResponse]
	getResources           *connect.Client[v1.GetResourcesRequest, v1.GetResourcesResponse]
	getNodeMetrics         *connect.Client[v1.GetNodeMetricsRequest, v1.GetNodeMetricsResponse]
	getPodMetrics          *connect.Client[v1.GetPodMetricsRequest, v1.GetPodMetricsResponse]
}

// GetClusters calls api.v1.K8SService.GetClusters.
func (c *k8SServiceClient) GetClusters(ctx context.Context, req *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error) {
	return c.getClusters.CallUnary(ctx, req)
}

// GetCluster calls api.v1.K8SService.GetCluster.
func (c *k8SServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// GetClusterAnalytics calls api.v1.K8SService.GetClusterAnalytics.
func (c *k8SServiceClient) GetClusterAnalytics(ctx context.Context, req *connect.Request[v1.GetClusterAnalyticsRequest]) (*connect.Response[v1.GetClusterAnalyticsResponse], error) {
	return c.getClusterAnalytics.CallUnary(ctx, req)
}

// GetClusterCostAnalysis calls api.v1.K8SService.GetClusterCostAnalysis.
func (c *k8SServiceClient) GetClusterCostAnalysis(ctx context.Context, req *connect.Request[v1.GetClusterCostAnalysisRequest]) (*connect.Response[v1.GetClusterCostAnalysisResponse], error) {
	return c.getClusterCostAnalysis.CallUnary(ctx, req)
}

// GetNodes calls api.v1.K8SService.GetNodes.
func (c *k8SServiceClient) GetNodes(ctx context.Context, req *connect.Request[v1.GetNodesRequest]) (*connect.Response[v1.GetNodesResponse], error) {
	return c.getNodes.CallUnary(ctx, req)
}

// GetNodeGroups calls api.v1.K8SService.GetNodeGroups.
func (c *k8SServiceClient) GetNodeGroups(ctx context.Context, req *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error) {
	return c.getNodeGroups.CallUnary(ctx, req)
}

// GetNamespaces calls api.v1.K8SService.GetNamespaces.
func (c *k8SServiceClient) GetNamespaces(ctx context.Context, req *connect.Request[v1.GetNamespacesRequest]) (*connect.Response[v1.GetNamespacesResponse], error) {
	return c.getNamespaces.CallUnary(ctx, req)
}

// GetResources calls api.v1.K8SService.GetResources.
func (c *k8SServiceClient) GetResources(ctx context.Context, req *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error) {
	return c.getResources.CallUnary(ctx, req)
}

// GetNodeMetrics calls api.v1.K8SService.GetNodeMetrics.
func (c *k8SServiceClient) GetNodeMetrics(ctx context.Context, req *connect.Request[v1.GetNodeMetricsRequest]) (*connect.Response[v1.GetNodeMetricsResponse], error) {
	return c.getNodeMetrics.CallUnary(ctx, req)
}

// GetPodMetrics calls api.v1.K8SService.GetPodMetrics.
func (c *k8SServiceClient) GetPodMetrics(ctx context.Context, req *connect.Request[v1.GetPodMetricsRequest]) (*connect.Response[v1.GetPodMetricsResponse], error) {
	return c.getPodMetrics.CallUnary(ctx, req)
}

// K8SServiceHandler is an implementation of the api.v1.K8SService service.
type K8SServiceHandler interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error)
	// GetCluster retrieves cluster details for a team.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// GetClusterAnalytics get cluster analytics
	GetClusterAnalytics(context.Context, *connect.Request[v1.GetClusterAnalyticsRequest]) (*connect.Response[v1.GetClusterAnalyticsResponse], error)
	// GetClusterCostAnalysis returns cost analysis
	GetClusterCostAnalysis(context.Context, *connect.Request[v1.GetClusterCostAnalysisRequest]) (*connect.Response[v1.GetClusterCostAnalysisResponse], error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodes(context.Context, *connect.Request[v1.GetNodesRequest]) (*connect.Response[v1.GetNodesResponse], error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error)
	// GetNamespaces retrieves all namespaces for a specific cluster.
	GetNamespaces(context.Context, *connect.Request[v1.GetNamespacesRequest]) (*connect.Response[v1.GetNamespacesResponse], error)
	// GetResources retrieves resources for a specific namespace, optionally filtered by kind.
	GetResources(context.Context, *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error)
	// GetNodeMetrics retrieves time-series metrics for a specific node.
	GetNodeMetrics(context.Context, *connect.Request[v1.GetNodeMetricsRequest]) (*connect.Response[v1.GetNodeMetricsResponse], error)
	// GetPodMetrics retrieves time-series metrics for a specific pod.
	GetPodMetrics(context.Context, *connect.Request[v1.GetPodMetricsRequest]) (*connect.Response[v1.GetPodMetricsResponse], error)
}

// NewK8SServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewK8SServiceHandler(svc K8SServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	k8SServiceGetClustersHandler := connect.NewUnaryHandler(
		K8SServiceGetClustersProcedure,
		svc.GetClusters,
		opts...,
	)
	k8SServiceGetClusterHandler := connect.NewUnaryHandler(
		K8SServiceGetClusterProcedure,
		svc.GetCluster,
		opts...,
	)
	k8SServiceGetClusterAnalyticsHandler := connect.NewUnaryHandler(
		K8SServiceGetClusterAnalyticsProcedure,
		svc.GetClusterAnalytics,
		opts...,
	)
	k8SServiceGetClusterCostAnalysisHandler := connect.NewUnaryHandler(
		K8SServiceGetClusterCostAnalysisProcedure,
		svc.GetClusterCostAnalysis,
		opts...,
	)
	k8SServiceGetNodesHandler := connect.NewUnaryHandler(
		K8SServiceGetNodesProcedure,
		svc.GetNodes,
		opts...,
	)
	k8SServiceGetNodeGroupsHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeGroupsProcedure,
		svc.GetNodeGroups,
		opts...,
	)
	k8SServiceGetNamespacesHandler := connect.NewUnaryHandler(
		K8SServiceGetNamespacesProcedure,
		svc.GetNamespaces,
		opts...,
	)
	k8SServiceGetResourcesHandler := connect.NewUnaryHandler(
		K8SServiceGetResourcesProcedure,
		svc.GetResources,
		opts...,
	)
	k8SServiceGetNodeMetricsHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeMetricsProcedure,
		svc.GetNodeMetrics,
		opts...,
	)
	k8SServiceGetPodMetricsHandler := connect.NewUnaryHandler(
		K8SServiceGetPodMetricsProcedure,
		svc.GetPodMetrics,
		opts...,
	)
	return "/api.v1.K8SService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case K8SServiceGetClustersProcedure:
			k8SServiceGetClustersHandler.ServeHTTP(w, r)
		case K8SServiceGetClusterProcedure:
			k8SServiceGetClusterHandler.ServeHTTP(w, r)
		case K8SServiceGetClusterAnalyticsProcedure:
			k8SServiceGetClusterAnalyticsHandler.ServeHTTP(w, r)
		case K8SServiceGetClusterCostAnalysisProcedure:
			k8SServiceGetClusterCostAnalysisHandler.ServeHTTP(w, r)
		case K8SServiceGetNodesProcedure:
			k8SServiceGetNodesHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeGroupsProcedure:
			k8SServiceGetNodeGroupsHandler.ServeHTTP(w, r)
		case K8SServiceGetNamespacesProcedure:
			k8SServiceGetNamespacesHandler.ServeHTTP(w, r)
		case K8SServiceGetResourcesProcedure:
			k8SServiceGetResourcesHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeMetricsProcedure:
			k8SServiceGetNodeMetricsHandler.ServeHTTP(w, r)
		case K8SServiceGetPodMetricsProcedure:
			k8SServiceGetPodMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedK8SServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedK8SServiceHandler struct{}

func (UnimplementedK8SServiceHandler) GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClusters is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetCluster is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetClusterAnalytics(context.Context, *connect.Request[v1.GetClusterAnalyticsRequest]) (*connect.Response[v1.GetClusterAnalyticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClusterAnalytics is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetClusterCostAnalysis(context.Context, *connect.Request[v1.GetClusterCostAnalysisRequest]) (*connect.Response[v1.GetClusterCostAnalysisResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClusterCostAnalysis is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodes(context.Context, *connect.Request[v1.GetNodesRequest]) (*connect.Response[v1.GetNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodes is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeGroups is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNamespaces(context.Context, *connect.Request[v1.GetNamespacesRequest]) (*connect.Response[v1.GetNamespacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNamespaces is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetResources(context.Context, *connect.Request[v1.GetResourcesRequest]) (*connect.Response[v1.GetResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetResources is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeMetrics(context.Context, *connect.Request[v1.GetNodeMetricsRequest]) (*connect.Response[v1.GetNodeMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeMetrics is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetPodMetrics(context.Context, *connect.Request[v1.GetPodMetricsRequest]) (*connect.Response[v1.GetPodMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetPodMetrics is not implemented"))
}
