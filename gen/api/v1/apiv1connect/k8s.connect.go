// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/k8s.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/devzero-inc/zxporter/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// K8SServiceName is the fully-qualified name of the K8SService service.
	K8SServiceName = "api.v1.K8SService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// K8SServiceGetClustersProcedure is the fully-qualified name of the K8SService's GetClusters RPC.
	K8SServiceGetClustersProcedure = "/api.v1.K8SService/GetClusters"
	// K8SServiceGetClusterProcedure is the fully-qualified name of the K8SService's GetCluster RPC.
	K8SServiceGetClusterProcedure = "/api.v1.K8SService/GetCluster"
	// K8SServiceGetNodesProcedure is the fully-qualified name of the K8SService's GetNodes RPC.
	K8SServiceGetNodesProcedure = "/api.v1.K8SService/GetNodes"
	// K8SServiceGetNodeGroupsProcedure is the fully-qualified name of the K8SService's GetNodeGroups
	// RPC.
	K8SServiceGetNodeGroupsProcedure = "/api.v1.K8SService/GetNodeGroups"
	// K8SServiceGetNodeUtilizationProcedure is the fully-qualified name of the K8SService's
	// GetNodeUtilization RPC.
	K8SServiceGetNodeUtilizationProcedure = "/api.v1.K8SService/GetNodeUtilization"
	// K8SServiceGetNodeCostProcedure is the fully-qualified name of the K8SService's GetNodeCost RPC.
	K8SServiceGetNodeCostProcedure = "/api.v1.K8SService/GetNodeCost"
	// K8SServiceGetClusterCostProcedure is the fully-qualified name of the K8SService's GetClusterCost
	// RPC.
	K8SServiceGetClusterCostProcedure = "/api.v1.K8SService/GetClusterCost"
	// K8SServiceGetClusterCostAnalysisProcedure is the fully-qualified name of the K8SService's
	// GetClusterCostAnalysis RPC.
	K8SServiceGetClusterCostAnalysisProcedure = "/api.v1.K8SService/GetClusterCostAnalysis"
	// K8SServiceGetWorkloadAnalysisProcedure is the fully-qualified name of the K8SService's
	// GetWorkloadAnalysis RPC.
	K8SServiceGetWorkloadAnalysisProcedure = "/api.v1.K8SService/GetWorkloadAnalysis"
	// K8SServiceGetNodeDetailsProcedure is the fully-qualified name of the K8SService's GetNodeDetails
	// RPC.
	K8SServiceGetNodeDetailsProcedure = "/api.v1.K8SService/GetNodeDetails"
	// K8SServiceGetNodeCostHistoryProcedure is the fully-qualified name of the K8SService's
	// GetNodeCostHistory RPC.
	K8SServiceGetNodeCostHistoryProcedure = "/api.v1.K8SService/GetNodeCostHistory"
	// K8SServiceGetNodeCPUUsageHistoryProcedure is the fully-qualified name of the K8SService's
	// GetNodeCPUUsageHistory RPC.
	K8SServiceGetNodeCPUUsageHistoryProcedure = "/api.v1.K8SService/GetNodeCPUUsageHistory"
	// K8SServiceGetNodeMemoryUsageHistoryProcedure is the fully-qualified name of the K8SService's
	// GetNodeMemoryUsageHistory RPC.
	K8SServiceGetNodeMemoryUsageHistoryProcedure = "/api.v1.K8SService/GetNodeMemoryUsageHistory"
	// K8SServiceGetWorkloadDetailsProcedure is the fully-qualified name of the K8SService's
	// GetWorkloadDetails RPC.
	K8SServiceGetWorkloadDetailsProcedure = "/api.v1.K8SService/GetWorkloadDetails"
	// K8SServiceGetWorkloadCostHistoryProcedure is the fully-qualified name of the K8SService's
	// GetWorkloadCostHistory RPC.
	K8SServiceGetWorkloadCostHistoryProcedure = "/api.v1.K8SService/GetWorkloadCostHistory"
	// K8SServiceGetWorkloadCPUUsageHistoryProcedure is the fully-qualified name of the K8SService's
	// GetWorkloadCPUUsageHistory RPC.
	K8SServiceGetWorkloadCPUUsageHistoryProcedure = "/api.v1.K8SService/GetWorkloadCPUUsageHistory"
	// K8SServiceGetWorkloadMemoryUsageHistoryProcedure is the fully-qualified name of the K8SService's
	// GetWorkloadMemoryUsageHistory RPC.
	K8SServiceGetWorkloadMemoryUsageHistoryProcedure = "/api.v1.K8SService/GetWorkloadMemoryUsageHistory"
)

// K8SServiceClient is a client for the api.v1.K8SService service.
type K8SServiceClient interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error)
	// GetCluster retrieves cluster details for a team.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodes(context.Context, *connect.Request[v1.GetNodesRequest]) (*connect.Response[v1.GetNodesResponse], error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error)
	// GetNodeUtilization returns node utilization over time for specific cluster.
	GetNodeUtilization(context.Context, *connect.Request[v1.GetNodeUtilizationRequest]) (*connect.Response[v1.GetNodeUtilizationResponse], error)
	// GetNodeCost returns node cost over time for specific cluster.
	GetNodeCost(context.Context, *connect.Request[v1.GetNodeCostRequest]) (*connect.Response[v1.GetNodeCostResponse], error)
	// GetClusterCost returns cluster cost over time for specific cluster.
	GetClusterCost(context.Context, *connect.Request[v1.GetClusterCostRequest]) (*connect.Response[v1.GetClusterCostResponse], error)
	// GetClusterCostAnalysis returns detailed cost analysis for a cluster
	GetClusterCostAnalysis(context.Context, *connect.Request[v1.GetClusterCostAnalysisRequest]) (*connect.Response[v1.GetClusterCostAnalysisResponse], error)
	// GetWorkloadAnalysis returns detailed workload analysis for a cluster
	GetWorkloadAnalysis(context.Context, *connect.Request[v1.GetWorkloadAnalysisRequest]) (*connect.Response[v1.GetWorkloadAnalysisResponse], error)
	// GetNodeDetails retrieves detailed information about a specific node
	GetNodeDetails(context.Context, *connect.Request[v1.GetNodeDetailsRequest]) (*connect.Response[v1.GetNodeDetailsResponse], error)
	// GetNodeCostHistory retrieves node cost history for a specific node
	GetNodeCostHistory(context.Context, *connect.Request[v1.GetNodeCostHistoryRequest]) (*connect.Response[v1.GetNodeCostHistoryResponse], error)
	// GetNodeCPUUsageHistory retrieves node CPU utilization history for a specific node
	GetNodeCPUUsageHistory(context.Context, *connect.Request[v1.GetNodeCPUUsageHistoryRequest]) (*connect.Response[v1.GetNodeCPUUsageHistoryResponse], error)
	// GetNodeMemoryUsageHistory retrieves node memory utilization history for a specific node
	GetNodeMemoryUsageHistory(context.Context, *connect.Request[v1.GetNodeMemoryUsageHistoryRequest]) (*connect.Response[v1.GetNodeMemoryUsageHistoryResponse], error)
	// GetWorkloadDetails retrieves detailed information about a specific workload
	GetWorkloadDetails(context.Context, *connect.Request[v1.GetWorkloadDetailsRequest]) (*connect.Response[v1.GetWorkloadDetailsResponse], error)
	// GetWorkloadCostHistory returns cost history for a specific workload.
	GetWorkloadCostHistory(context.Context, *connect.Request[v1.GetWorkloadCostHistoryRequest]) (*connect.Response[v1.GetWorkloadCostHistoryResponse], error)
	// GetWorkloadCPUUsageHistory returns CPU usage history for a specific workload.
	GetWorkloadCPUUsageHistory(context.Context, *connect.Request[v1.GetWorkloadCPUUsageHistoryRequest]) (*connect.Response[v1.GetWorkloadCPUUsageHistoryResponse], error)
	// GetWorkloadMemoryUsageHistory returns memory usage history for a specific workload.
	GetWorkloadMemoryUsageHistory(context.Context, *connect.Request[v1.GetWorkloadMemoryUsageHistoryRequest]) (*connect.Response[v1.GetWorkloadMemoryUsageHistoryResponse], error)
}

// NewK8SServiceClient constructs a client for the api.v1.K8SService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewK8SServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) K8SServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &k8SServiceClient{
		getClusters: connect.NewClient[v1.GetClustersRequest, v1.GetClustersResponse](
			httpClient,
			baseURL+K8SServiceGetClustersProcedure,
			opts...,
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.GetClusterResponse](
			httpClient,
			baseURL+K8SServiceGetClusterProcedure,
			opts...,
		),
		getNodes: connect.NewClient[v1.GetNodesRequest, v1.GetNodesResponse](
			httpClient,
			baseURL+K8SServiceGetNodesProcedure,
			opts...,
		),
		getNodeGroups: connect.NewClient[v1.GetNodeGroupsRequest, v1.GetNodeGroupsResponse](
			httpClient,
			baseURL+K8SServiceGetNodeGroupsProcedure,
			opts...,
		),
		getNodeUtilization: connect.NewClient[v1.GetNodeUtilizationRequest, v1.GetNodeUtilizationResponse](
			httpClient,
			baseURL+K8SServiceGetNodeUtilizationProcedure,
			opts...,
		),
		getNodeCost: connect.NewClient[v1.GetNodeCostRequest, v1.GetNodeCostResponse](
			httpClient,
			baseURL+K8SServiceGetNodeCostProcedure,
			opts...,
		),
		getClusterCost: connect.NewClient[v1.GetClusterCostRequest, v1.GetClusterCostResponse](
			httpClient,
			baseURL+K8SServiceGetClusterCostProcedure,
			opts...,
		),
		getClusterCostAnalysis: connect.NewClient[v1.GetClusterCostAnalysisRequest, v1.GetClusterCostAnalysisResponse](
			httpClient,
			baseURL+K8SServiceGetClusterCostAnalysisProcedure,
			opts...,
		),
		getWorkloadAnalysis: connect.NewClient[v1.GetWorkloadAnalysisRequest, v1.GetWorkloadAnalysisResponse](
			httpClient,
			baseURL+K8SServiceGetWorkloadAnalysisProcedure,
			opts...,
		),
		getNodeDetails: connect.NewClient[v1.GetNodeDetailsRequest, v1.GetNodeDetailsResponse](
			httpClient,
			baseURL+K8SServiceGetNodeDetailsProcedure,
			opts...,
		),
		getNodeCostHistory: connect.NewClient[v1.GetNodeCostHistoryRequest, v1.GetNodeCostHistoryResponse](
			httpClient,
			baseURL+K8SServiceGetNodeCostHistoryProcedure,
			opts...,
		),
		getNodeCPUUsageHistory: connect.NewClient[v1.GetNodeCPUUsageHistoryRequest, v1.GetNodeCPUUsageHistoryResponse](
			httpClient,
			baseURL+K8SServiceGetNodeCPUUsageHistoryProcedure,
			opts...,
		),
		getNodeMemoryUsageHistory: connect.NewClient[v1.GetNodeMemoryUsageHistoryRequest, v1.GetNodeMemoryUsageHistoryResponse](
			httpClient,
			baseURL+K8SServiceGetNodeMemoryUsageHistoryProcedure,
			opts...,
		),
		getWorkloadDetails: connect.NewClient[v1.GetWorkloadDetailsRequest, v1.GetWorkloadDetailsResponse](
			httpClient,
			baseURL+K8SServiceGetWorkloadDetailsProcedure,
			opts...,
		),
		getWorkloadCostHistory: connect.NewClient[v1.GetWorkloadCostHistoryRequest, v1.GetWorkloadCostHistoryResponse](
			httpClient,
			baseURL+K8SServiceGetWorkloadCostHistoryProcedure,
			opts...,
		),
		getWorkloadCPUUsageHistory: connect.NewClient[v1.GetWorkloadCPUUsageHistoryRequest, v1.GetWorkloadCPUUsageHistoryResponse](
			httpClient,
			baseURL+K8SServiceGetWorkloadCPUUsageHistoryProcedure,
			opts...,
		),
		getWorkloadMemoryUsageHistory: connect.NewClient[v1.GetWorkloadMemoryUsageHistoryRequest, v1.GetWorkloadMemoryUsageHistoryResponse](
			httpClient,
			baseURL+K8SServiceGetWorkloadMemoryUsageHistoryProcedure,
			opts...,
		),
	}
}

// k8SServiceClient implements K8SServiceClient.
type k8SServiceClient struct {
	getClusters                   *connect.Client[v1.GetClustersRequest, v1.GetClustersResponse]
	getCluster                    *connect.Client[v1.GetClusterRequest, v1.GetClusterResponse]
	getNodes                      *connect.Client[v1.GetNodesRequest, v1.GetNodesResponse]
	getNodeGroups                 *connect.Client[v1.GetNodeGroupsRequest, v1.GetNodeGroupsResponse]
	getNodeUtilization            *connect.Client[v1.GetNodeUtilizationRequest, v1.GetNodeUtilizationResponse]
	getNodeCost                   *connect.Client[v1.GetNodeCostRequest, v1.GetNodeCostResponse]
	getClusterCost                *connect.Client[v1.GetClusterCostRequest, v1.GetClusterCostResponse]
	getClusterCostAnalysis        *connect.Client[v1.GetClusterCostAnalysisRequest, v1.GetClusterCostAnalysisResponse]
	getWorkloadAnalysis           *connect.Client[v1.GetWorkloadAnalysisRequest, v1.GetWorkloadAnalysisResponse]
	getNodeDetails                *connect.Client[v1.GetNodeDetailsRequest, v1.GetNodeDetailsResponse]
	getNodeCostHistory            *connect.Client[v1.GetNodeCostHistoryRequest, v1.GetNodeCostHistoryResponse]
	getNodeCPUUsageHistory        *connect.Client[v1.GetNodeCPUUsageHistoryRequest, v1.GetNodeCPUUsageHistoryResponse]
	getNodeMemoryUsageHistory     *connect.Client[v1.GetNodeMemoryUsageHistoryRequest, v1.GetNodeMemoryUsageHistoryResponse]
	getWorkloadDetails            *connect.Client[v1.GetWorkloadDetailsRequest, v1.GetWorkloadDetailsResponse]
	getWorkloadCostHistory        *connect.Client[v1.GetWorkloadCostHistoryRequest, v1.GetWorkloadCostHistoryResponse]
	getWorkloadCPUUsageHistory    *connect.Client[v1.GetWorkloadCPUUsageHistoryRequest, v1.GetWorkloadCPUUsageHistoryResponse]
	getWorkloadMemoryUsageHistory *connect.Client[v1.GetWorkloadMemoryUsageHistoryRequest, v1.GetWorkloadMemoryUsageHistoryResponse]
}

// GetClusters calls api.v1.K8SService.GetClusters.
func (c *k8SServiceClient) GetClusters(ctx context.Context, req *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error) {
	return c.getClusters.CallUnary(ctx, req)
}

// GetCluster calls api.v1.K8SService.GetCluster.
func (c *k8SServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// GetNodes calls api.v1.K8SService.GetNodes.
func (c *k8SServiceClient) GetNodes(ctx context.Context, req *connect.Request[v1.GetNodesRequest]) (*connect.Response[v1.GetNodesResponse], error) {
	return c.getNodes.CallUnary(ctx, req)
}

// GetNodeGroups calls api.v1.K8SService.GetNodeGroups.
func (c *k8SServiceClient) GetNodeGroups(ctx context.Context, req *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error) {
	return c.getNodeGroups.CallUnary(ctx, req)
}

// GetNodeUtilization calls api.v1.K8SService.GetNodeUtilization.
func (c *k8SServiceClient) GetNodeUtilization(ctx context.Context, req *connect.Request[v1.GetNodeUtilizationRequest]) (*connect.Response[v1.GetNodeUtilizationResponse], error) {
	return c.getNodeUtilization.CallUnary(ctx, req)
}

// GetNodeCost calls api.v1.K8SService.GetNodeCost.
func (c *k8SServiceClient) GetNodeCost(ctx context.Context, req *connect.Request[v1.GetNodeCostRequest]) (*connect.Response[v1.GetNodeCostResponse], error) {
	return c.getNodeCost.CallUnary(ctx, req)
}

// GetClusterCost calls api.v1.K8SService.GetClusterCost.
func (c *k8SServiceClient) GetClusterCost(ctx context.Context, req *connect.Request[v1.GetClusterCostRequest]) (*connect.Response[v1.GetClusterCostResponse], error) {
	return c.getClusterCost.CallUnary(ctx, req)
}

// GetClusterCostAnalysis calls api.v1.K8SService.GetClusterCostAnalysis.
func (c *k8SServiceClient) GetClusterCostAnalysis(ctx context.Context, req *connect.Request[v1.GetClusterCostAnalysisRequest]) (*connect.Response[v1.GetClusterCostAnalysisResponse], error) {
	return c.getClusterCostAnalysis.CallUnary(ctx, req)
}

// GetWorkloadAnalysis calls api.v1.K8SService.GetWorkloadAnalysis.
func (c *k8SServiceClient) GetWorkloadAnalysis(ctx context.Context, req *connect.Request[v1.GetWorkloadAnalysisRequest]) (*connect.Response[v1.GetWorkloadAnalysisResponse], error) {
	return c.getWorkloadAnalysis.CallUnary(ctx, req)
}

// GetNodeDetails calls api.v1.K8SService.GetNodeDetails.
func (c *k8SServiceClient) GetNodeDetails(ctx context.Context, req *connect.Request[v1.GetNodeDetailsRequest]) (*connect.Response[v1.GetNodeDetailsResponse], error) {
	return c.getNodeDetails.CallUnary(ctx, req)
}

// GetNodeCostHistory calls api.v1.K8SService.GetNodeCostHistory.
func (c *k8SServiceClient) GetNodeCostHistory(ctx context.Context, req *connect.Request[v1.GetNodeCostHistoryRequest]) (*connect.Response[v1.GetNodeCostHistoryResponse], error) {
	return c.getNodeCostHistory.CallUnary(ctx, req)
}

// GetNodeCPUUsageHistory calls api.v1.K8SService.GetNodeCPUUsageHistory.
func (c *k8SServiceClient) GetNodeCPUUsageHistory(ctx context.Context, req *connect.Request[v1.GetNodeCPUUsageHistoryRequest]) (*connect.Response[v1.GetNodeCPUUsageHistoryResponse], error) {
	return c.getNodeCPUUsageHistory.CallUnary(ctx, req)
}

// GetNodeMemoryUsageHistory calls api.v1.K8SService.GetNodeMemoryUsageHistory.
func (c *k8SServiceClient) GetNodeMemoryUsageHistory(ctx context.Context, req *connect.Request[v1.GetNodeMemoryUsageHistoryRequest]) (*connect.Response[v1.GetNodeMemoryUsageHistoryResponse], error) {
	return c.getNodeMemoryUsageHistory.CallUnary(ctx, req)
}

// GetWorkloadDetails calls api.v1.K8SService.GetWorkloadDetails.
func (c *k8SServiceClient) GetWorkloadDetails(ctx context.Context, req *connect.Request[v1.GetWorkloadDetailsRequest]) (*connect.Response[v1.GetWorkloadDetailsResponse], error) {
	return c.getWorkloadDetails.CallUnary(ctx, req)
}

// GetWorkloadCostHistory calls api.v1.K8SService.GetWorkloadCostHistory.
func (c *k8SServiceClient) GetWorkloadCostHistory(ctx context.Context, req *connect.Request[v1.GetWorkloadCostHistoryRequest]) (*connect.Response[v1.GetWorkloadCostHistoryResponse], error) {
	return c.getWorkloadCostHistory.CallUnary(ctx, req)
}

// GetWorkloadCPUUsageHistory calls api.v1.K8SService.GetWorkloadCPUUsageHistory.
func (c *k8SServiceClient) GetWorkloadCPUUsageHistory(ctx context.Context, req *connect.Request[v1.GetWorkloadCPUUsageHistoryRequest]) (*connect.Response[v1.GetWorkloadCPUUsageHistoryResponse], error) {
	return c.getWorkloadCPUUsageHistory.CallUnary(ctx, req)
}

// GetWorkloadMemoryUsageHistory calls api.v1.K8SService.GetWorkloadMemoryUsageHistory.
func (c *k8SServiceClient) GetWorkloadMemoryUsageHistory(ctx context.Context, req *connect.Request[v1.GetWorkloadMemoryUsageHistoryRequest]) (*connect.Response[v1.GetWorkloadMemoryUsageHistoryResponse], error) {
	return c.getWorkloadMemoryUsageHistory.CallUnary(ctx, req)
}

// K8SServiceHandler is an implementation of the api.v1.K8SService service.
type K8SServiceHandler interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error)
	// GetCluster retrieves cluster details for a team.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodes(context.Context, *connect.Request[v1.GetNodesRequest]) (*connect.Response[v1.GetNodesResponse], error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error)
	// GetNodeUtilization returns node utilization over time for specific cluster.
	GetNodeUtilization(context.Context, *connect.Request[v1.GetNodeUtilizationRequest]) (*connect.Response[v1.GetNodeUtilizationResponse], error)
	// GetNodeCost returns node cost over time for specific cluster.
	GetNodeCost(context.Context, *connect.Request[v1.GetNodeCostRequest]) (*connect.Response[v1.GetNodeCostResponse], error)
	// GetClusterCost returns cluster cost over time for specific cluster.
	GetClusterCost(context.Context, *connect.Request[v1.GetClusterCostRequest]) (*connect.Response[v1.GetClusterCostResponse], error)
	// GetClusterCostAnalysis returns detailed cost analysis for a cluster
	GetClusterCostAnalysis(context.Context, *connect.Request[v1.GetClusterCostAnalysisRequest]) (*connect.Response[v1.GetClusterCostAnalysisResponse], error)
	// GetWorkloadAnalysis returns detailed workload analysis for a cluster
	GetWorkloadAnalysis(context.Context, *connect.Request[v1.GetWorkloadAnalysisRequest]) (*connect.Response[v1.GetWorkloadAnalysisResponse], error)
	// GetNodeDetails retrieves detailed information about a specific node
	GetNodeDetails(context.Context, *connect.Request[v1.GetNodeDetailsRequest]) (*connect.Response[v1.GetNodeDetailsResponse], error)
	// GetNodeCostHistory retrieves node cost history for a specific node
	GetNodeCostHistory(context.Context, *connect.Request[v1.GetNodeCostHistoryRequest]) (*connect.Response[v1.GetNodeCostHistoryResponse], error)
	// GetNodeCPUUsageHistory retrieves node CPU utilization history for a specific node
	GetNodeCPUUsageHistory(context.Context, *connect.Request[v1.GetNodeCPUUsageHistoryRequest]) (*connect.Response[v1.GetNodeCPUUsageHistoryResponse], error)
	// GetNodeMemoryUsageHistory retrieves node memory utilization history for a specific node
	GetNodeMemoryUsageHistory(context.Context, *connect.Request[v1.GetNodeMemoryUsageHistoryRequest]) (*connect.Response[v1.GetNodeMemoryUsageHistoryResponse], error)
	// GetWorkloadDetails retrieves detailed information about a specific workload
	GetWorkloadDetails(context.Context, *connect.Request[v1.GetWorkloadDetailsRequest]) (*connect.Response[v1.GetWorkloadDetailsResponse], error)
	// GetWorkloadCostHistory returns cost history for a specific workload.
	GetWorkloadCostHistory(context.Context, *connect.Request[v1.GetWorkloadCostHistoryRequest]) (*connect.Response[v1.GetWorkloadCostHistoryResponse], error)
	// GetWorkloadCPUUsageHistory returns CPU usage history for a specific workload.
	GetWorkloadCPUUsageHistory(context.Context, *connect.Request[v1.GetWorkloadCPUUsageHistoryRequest]) (*connect.Response[v1.GetWorkloadCPUUsageHistoryResponse], error)
	// GetWorkloadMemoryUsageHistory returns memory usage history for a specific workload.
	GetWorkloadMemoryUsageHistory(context.Context, *connect.Request[v1.GetWorkloadMemoryUsageHistoryRequest]) (*connect.Response[v1.GetWorkloadMemoryUsageHistoryResponse], error)
}

// NewK8SServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewK8SServiceHandler(svc K8SServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	k8SServiceGetClustersHandler := connect.NewUnaryHandler(
		K8SServiceGetClustersProcedure,
		svc.GetClusters,
		opts...,
	)
	k8SServiceGetClusterHandler := connect.NewUnaryHandler(
		K8SServiceGetClusterProcedure,
		svc.GetCluster,
		opts...,
	)
	k8SServiceGetNodesHandler := connect.NewUnaryHandler(
		K8SServiceGetNodesProcedure,
		svc.GetNodes,
		opts...,
	)
	k8SServiceGetNodeGroupsHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeGroupsProcedure,
		svc.GetNodeGroups,
		opts...,
	)
	k8SServiceGetNodeUtilizationHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeUtilizationProcedure,
		svc.GetNodeUtilization,
		opts...,
	)
	k8SServiceGetNodeCostHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeCostProcedure,
		svc.GetNodeCost,
		opts...,
	)
	k8SServiceGetClusterCostHandler := connect.NewUnaryHandler(
		K8SServiceGetClusterCostProcedure,
		svc.GetClusterCost,
		opts...,
	)
	k8SServiceGetClusterCostAnalysisHandler := connect.NewUnaryHandler(
		K8SServiceGetClusterCostAnalysisProcedure,
		svc.GetClusterCostAnalysis,
		opts...,
	)
	k8SServiceGetWorkloadAnalysisHandler := connect.NewUnaryHandler(
		K8SServiceGetWorkloadAnalysisProcedure,
		svc.GetWorkloadAnalysis,
		opts...,
	)
	k8SServiceGetNodeDetailsHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeDetailsProcedure,
		svc.GetNodeDetails,
		opts...,
	)
	k8SServiceGetNodeCostHistoryHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeCostHistoryProcedure,
		svc.GetNodeCostHistory,
		opts...,
	)
	k8SServiceGetNodeCPUUsageHistoryHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeCPUUsageHistoryProcedure,
		svc.GetNodeCPUUsageHistory,
		opts...,
	)
	k8SServiceGetNodeMemoryUsageHistoryHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeMemoryUsageHistoryProcedure,
		svc.GetNodeMemoryUsageHistory,
		opts...,
	)
	k8SServiceGetWorkloadDetailsHandler := connect.NewUnaryHandler(
		K8SServiceGetWorkloadDetailsProcedure,
		svc.GetWorkloadDetails,
		opts...,
	)
	k8SServiceGetWorkloadCostHistoryHandler := connect.NewUnaryHandler(
		K8SServiceGetWorkloadCostHistoryProcedure,
		svc.GetWorkloadCostHistory,
		opts...,
	)
	k8SServiceGetWorkloadCPUUsageHistoryHandler := connect.NewUnaryHandler(
		K8SServiceGetWorkloadCPUUsageHistoryProcedure,
		svc.GetWorkloadCPUUsageHistory,
		opts...,
	)
	k8SServiceGetWorkloadMemoryUsageHistoryHandler := connect.NewUnaryHandler(
		K8SServiceGetWorkloadMemoryUsageHistoryProcedure,
		svc.GetWorkloadMemoryUsageHistory,
		opts...,
	)
	return "/api.v1.K8SService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case K8SServiceGetClustersProcedure:
			k8SServiceGetClustersHandler.ServeHTTP(w, r)
		case K8SServiceGetClusterProcedure:
			k8SServiceGetClusterHandler.ServeHTTP(w, r)
		case K8SServiceGetNodesProcedure:
			k8SServiceGetNodesHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeGroupsProcedure:
			k8SServiceGetNodeGroupsHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeUtilizationProcedure:
			k8SServiceGetNodeUtilizationHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeCostProcedure:
			k8SServiceGetNodeCostHandler.ServeHTTP(w, r)
		case K8SServiceGetClusterCostProcedure:
			k8SServiceGetClusterCostHandler.ServeHTTP(w, r)
		case K8SServiceGetClusterCostAnalysisProcedure:
			k8SServiceGetClusterCostAnalysisHandler.ServeHTTP(w, r)
		case K8SServiceGetWorkloadAnalysisProcedure:
			k8SServiceGetWorkloadAnalysisHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeDetailsProcedure:
			k8SServiceGetNodeDetailsHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeCostHistoryProcedure:
			k8SServiceGetNodeCostHistoryHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeCPUUsageHistoryProcedure:
			k8SServiceGetNodeCPUUsageHistoryHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeMemoryUsageHistoryProcedure:
			k8SServiceGetNodeMemoryUsageHistoryHandler.ServeHTTP(w, r)
		case K8SServiceGetWorkloadDetailsProcedure:
			k8SServiceGetWorkloadDetailsHandler.ServeHTTP(w, r)
		case K8SServiceGetWorkloadCostHistoryProcedure:
			k8SServiceGetWorkloadCostHistoryHandler.ServeHTTP(w, r)
		case K8SServiceGetWorkloadCPUUsageHistoryProcedure:
			k8SServiceGetWorkloadCPUUsageHistoryHandler.ServeHTTP(w, r)
		case K8SServiceGetWorkloadMemoryUsageHistoryProcedure:
			k8SServiceGetWorkloadMemoryUsageHistoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedK8SServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedK8SServiceHandler struct{}

func (UnimplementedK8SServiceHandler) GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClusters is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetCluster is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodes(context.Context, *connect.Request[v1.GetNodesRequest]) (*connect.Response[v1.GetNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodes is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeGroups is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeUtilization(context.Context, *connect.Request[v1.GetNodeUtilizationRequest]) (*connect.Response[v1.GetNodeUtilizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeUtilization is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeCost(context.Context, *connect.Request[v1.GetNodeCostRequest]) (*connect.Response[v1.GetNodeCostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeCost is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetClusterCost(context.Context, *connect.Request[v1.GetClusterCostRequest]) (*connect.Response[v1.GetClusterCostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClusterCost is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetClusterCostAnalysis(context.Context, *connect.Request[v1.GetClusterCostAnalysisRequest]) (*connect.Response[v1.GetClusterCostAnalysisResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClusterCostAnalysis is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetWorkloadAnalysis(context.Context, *connect.Request[v1.GetWorkloadAnalysisRequest]) (*connect.Response[v1.GetWorkloadAnalysisResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetWorkloadAnalysis is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeDetails(context.Context, *connect.Request[v1.GetNodeDetailsRequest]) (*connect.Response[v1.GetNodeDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeDetails is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeCostHistory(context.Context, *connect.Request[v1.GetNodeCostHistoryRequest]) (*connect.Response[v1.GetNodeCostHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeCostHistory is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeCPUUsageHistory(context.Context, *connect.Request[v1.GetNodeCPUUsageHistoryRequest]) (*connect.Response[v1.GetNodeCPUUsageHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeCPUUsageHistory is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeMemoryUsageHistory(context.Context, *connect.Request[v1.GetNodeMemoryUsageHistoryRequest]) (*connect.Response[v1.GetNodeMemoryUsageHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeMemoryUsageHistory is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetWorkloadDetails(context.Context, *connect.Request[v1.GetWorkloadDetailsRequest]) (*connect.Response[v1.GetWorkloadDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetWorkloadDetails is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetWorkloadCostHistory(context.Context, *connect.Request[v1.GetWorkloadCostHistoryRequest]) (*connect.Response[v1.GetWorkloadCostHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetWorkloadCostHistory is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetWorkloadCPUUsageHistory(context.Context, *connect.Request[v1.GetWorkloadCPUUsageHistoryRequest]) (*connect.Response[v1.GetWorkloadCPUUsageHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetWorkloadCPUUsageHistory is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetWorkloadMemoryUsageHistory(context.Context, *connect.Request[v1.GetWorkloadMemoryUsageHistoryRequest]) (*connect.Response[v1.GetWorkloadMemoryUsageHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetWorkloadMemoryUsageHistory is not implemented"))
}
