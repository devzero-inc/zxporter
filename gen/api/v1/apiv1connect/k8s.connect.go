// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/k8s.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/devzero-inc/zxporter/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// K8SServiceName is the fully-qualified name of the K8SService service.
	K8SServiceName = "api.v1.K8SService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// K8SServiceGetClustersProcedure is the fully-qualified name of the K8SService's GetClusters RPC.
	K8SServiceGetClustersProcedure = "/api.v1.K8SService/GetClusters"
	// K8SServiceGetClusterProcedure is the fully-qualified name of the K8SService's GetCluster RPC.
	K8SServiceGetClusterProcedure = "/api.v1.K8SService/GetCluster"
	// K8SServiceGetNodeGroupsProcedure is the fully-qualified name of the K8SService's GetNodeGroups
	// RPC.
	K8SServiceGetNodeGroupsProcedure = "/api.v1.K8SService/GetNodeGroups"
	// K8SServiceGetNodeProcedure is the fully-qualified name of the K8SService's GetNode RPC.
	K8SServiceGetNodeProcedure = "/api.v1.K8SService/GetNode"
	// K8SServiceGetWorkloadsProcedure is the fully-qualified name of the K8SService's GetWorkloads RPC.
	K8SServiceGetWorkloadsProcedure = "/api.v1.K8SService/GetWorkloads"
	// K8SServiceGetWorkloadProcedure is the fully-qualified name of the K8SService's GetWorkload RPC.
	K8SServiceGetWorkloadProcedure = "/api.v1.K8SService/GetWorkload"
)

// K8SServiceClient is a client for the api.v1.K8SService service.
type K8SServiceClient interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error)
	// GetCluster retrieves detailed information for a specific cluster.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// GetNodeGroups retrieves all node groups for a specific cluster.
	GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error)
	// GetNode retrieves detailed information for a specific node.
	GetNode(context.Context, *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error)
	// GetWorkloads retrieves all workloads for a specific cluster.
	GetWorkloads(context.Context, *connect.Request[v1.GetWorkloadsRequest]) (*connect.Response[v1.GetWorkloadsResponse], error)
	// GetWorkload retrieves detailed information for a specific workload.
	GetWorkload(context.Context, *connect.Request[v1.GetWorkloadRequest]) (*connect.Response[v1.GetWorkloadResponse], error)
}

// NewK8SServiceClient constructs a client for the api.v1.K8SService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewK8SServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) K8SServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &k8SServiceClient{
		getClusters: connect.NewClient[v1.GetClustersRequest, v1.GetClustersResponse](
			httpClient,
			baseURL+K8SServiceGetClustersProcedure,
			opts...,
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.GetClusterResponse](
			httpClient,
			baseURL+K8SServiceGetClusterProcedure,
			opts...,
		),
		getNodeGroups: connect.NewClient[v1.GetNodeGroupsRequest, v1.GetNodeGroupsResponse](
			httpClient,
			baseURL+K8SServiceGetNodeGroupsProcedure,
			opts...,
		),
		getNode: connect.NewClient[v1.GetNodeRequest, v1.GetNodeResponse](
			httpClient,
			baseURL+K8SServiceGetNodeProcedure,
			opts...,
		),
		getWorkloads: connect.NewClient[v1.GetWorkloadsRequest, v1.GetWorkloadsResponse](
			httpClient,
			baseURL+K8SServiceGetWorkloadsProcedure,
			opts...,
		),
		getWorkload: connect.NewClient[v1.GetWorkloadRequest, v1.GetWorkloadResponse](
			httpClient,
			baseURL+K8SServiceGetWorkloadProcedure,
			opts...,
		),
	}
}

// k8SServiceClient implements K8SServiceClient.
type k8SServiceClient struct {
	getClusters   *connect.Client[v1.GetClustersRequest, v1.GetClustersResponse]
	getCluster    *connect.Client[v1.GetClusterRequest, v1.GetClusterResponse]
	getNodeGroups *connect.Client[v1.GetNodeGroupsRequest, v1.GetNodeGroupsResponse]
	getNode       *connect.Client[v1.GetNodeRequest, v1.GetNodeResponse]
	getWorkloads  *connect.Client[v1.GetWorkloadsRequest, v1.GetWorkloadsResponse]
	getWorkload   *connect.Client[v1.GetWorkloadRequest, v1.GetWorkloadResponse]
}

// GetClusters calls api.v1.K8SService.GetClusters.
func (c *k8SServiceClient) GetClusters(ctx context.Context, req *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error) {
	return c.getClusters.CallUnary(ctx, req)
}

// GetCluster calls api.v1.K8SService.GetCluster.
func (c *k8SServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// GetNodeGroups calls api.v1.K8SService.GetNodeGroups.
func (c *k8SServiceClient) GetNodeGroups(ctx context.Context, req *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error) {
	return c.getNodeGroups.CallUnary(ctx, req)
}

// GetNode calls api.v1.K8SService.GetNode.
func (c *k8SServiceClient) GetNode(ctx context.Context, req *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error) {
	return c.getNode.CallUnary(ctx, req)
}

// GetWorkloads calls api.v1.K8SService.GetWorkloads.
func (c *k8SServiceClient) GetWorkloads(ctx context.Context, req *connect.Request[v1.GetWorkloadsRequest]) (*connect.Response[v1.GetWorkloadsResponse], error) {
	return c.getWorkloads.CallUnary(ctx, req)
}

// GetWorkload calls api.v1.K8SService.GetWorkload.
func (c *k8SServiceClient) GetWorkload(ctx context.Context, req *connect.Request[v1.GetWorkloadRequest]) (*connect.Response[v1.GetWorkloadResponse], error) {
	return c.getWorkload.CallUnary(ctx, req)
}

// K8SServiceHandler is an implementation of the api.v1.K8SService service.
type K8SServiceHandler interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error)
	// GetCluster retrieves detailed information for a specific cluster.
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// GetNodeGroups retrieves all node groups for a specific cluster.
	GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error)
	// GetNode retrieves detailed information for a specific node.
	GetNode(context.Context, *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error)
	// GetWorkloads retrieves all workloads for a specific cluster.
	GetWorkloads(context.Context, *connect.Request[v1.GetWorkloadsRequest]) (*connect.Response[v1.GetWorkloadsResponse], error)
	// GetWorkload retrieves detailed information for a specific workload.
	GetWorkload(context.Context, *connect.Request[v1.GetWorkloadRequest]) (*connect.Response[v1.GetWorkloadResponse], error)
}

// NewK8SServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewK8SServiceHandler(svc K8SServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	k8SServiceGetClustersHandler := connect.NewUnaryHandler(
		K8SServiceGetClustersProcedure,
		svc.GetClusters,
		opts...,
	)
	k8SServiceGetClusterHandler := connect.NewUnaryHandler(
		K8SServiceGetClusterProcedure,
		svc.GetCluster,
		opts...,
	)
	k8SServiceGetNodeGroupsHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeGroupsProcedure,
		svc.GetNodeGroups,
		opts...,
	)
	k8SServiceGetNodeHandler := connect.NewUnaryHandler(
		K8SServiceGetNodeProcedure,
		svc.GetNode,
		opts...,
	)
	k8SServiceGetWorkloadsHandler := connect.NewUnaryHandler(
		K8SServiceGetWorkloadsProcedure,
		svc.GetWorkloads,
		opts...,
	)
	k8SServiceGetWorkloadHandler := connect.NewUnaryHandler(
		K8SServiceGetWorkloadProcedure,
		svc.GetWorkload,
		opts...,
	)
	return "/api.v1.K8SService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case K8SServiceGetClustersProcedure:
			k8SServiceGetClustersHandler.ServeHTTP(w, r)
		case K8SServiceGetClusterProcedure:
			k8SServiceGetClusterHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeGroupsProcedure:
			k8SServiceGetNodeGroupsHandler.ServeHTTP(w, r)
		case K8SServiceGetNodeProcedure:
			k8SServiceGetNodeHandler.ServeHTTP(w, r)
		case K8SServiceGetWorkloadsProcedure:
			k8SServiceGetWorkloadsHandler.ServeHTTP(w, r)
		case K8SServiceGetWorkloadProcedure:
			k8SServiceGetWorkloadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedK8SServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedK8SServiceHandler struct{}

func (UnimplementedK8SServiceHandler) GetClusters(context.Context, *connect.Request[v1.GetClustersRequest]) (*connect.Response[v1.GetClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetClusters is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetCluster is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNodeGroups(context.Context, *connect.Request[v1.GetNodeGroupsRequest]) (*connect.Response[v1.GetNodeGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNodeGroups is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetNode(context.Context, *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetNode is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetWorkloads(context.Context, *connect.Request[v1.GetWorkloadsRequest]) (*connect.Response[v1.GetWorkloadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetWorkloads is not implemented"))
}

func (UnimplementedK8SServiceHandler) GetWorkload(context.Context, *connect.Request[v1.GetWorkloadRequest]) (*connect.Response[v1.GetWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8SService.GetWorkload is not implemented"))
}
