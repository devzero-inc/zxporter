// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/department.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/devzero-inc/zxporter/gen/api/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// K8sDepartmentServiceName is the fully-qualified name of the K8sDepartmentService service.
	K8sDepartmentServiceName = "api.v1.K8sDepartmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// K8SDepartmentServiceCreateDepartmentProcedure is the fully-qualified name of the
	// K8sDepartmentService's CreateDepartment RPC.
	K8SDepartmentServiceCreateDepartmentProcedure = "/api.v1.K8sDepartmentService/CreateDepartment"
	// K8SDepartmentServiceEditDepartmentProcedure is the fully-qualified name of the
	// K8sDepartmentService's EditDepartment RPC.
	K8SDepartmentServiceEditDepartmentProcedure = "/api.v1.K8sDepartmentService/EditDepartment"
	// K8SDepartmentServiceGetDepartmentsProcedure is the fully-qualified name of the
	// K8sDepartmentService's GetDepartments RPC.
	K8SDepartmentServiceGetDepartmentsProcedure = "/api.v1.K8sDepartmentService/GetDepartments"
	// K8SDepartmentServiceDeleteDepartmentsProcedure is the fully-qualified name of the
	// K8sDepartmentService's DeleteDepartments RPC.
	K8SDepartmentServiceDeleteDepartmentsProcedure = "/api.v1.K8sDepartmentService/DeleteDepartments"
)

// K8SDepartmentServiceClient is a client for the api.v1.K8sDepartmentService service.
type K8SDepartmentServiceClient interface {
	CreateDepartment(context.Context, *connect.Request[v1.CreateDepartmentRequest]) (*connect.Response[v1.CreateDepartmentResponse], error)
	EditDepartment(context.Context, *connect.Request[v1.EditDepartmentRequest]) (*connect.Response[emptypb.Empty], error)
	GetDepartments(context.Context, *connect.Request[v1.GetDepartmentsRequest]) (*connect.Response[v1.GetDepartmentsResponse], error)
	DeleteDepartments(context.Context, *connect.Request[v1.DeleteDepartmentsRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewK8SDepartmentServiceClient constructs a client for the api.v1.K8sDepartmentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewK8SDepartmentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) K8SDepartmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &k8SDepartmentServiceClient{
		createDepartment: connect.NewClient[v1.CreateDepartmentRequest, v1.CreateDepartmentResponse](
			httpClient,
			baseURL+K8SDepartmentServiceCreateDepartmentProcedure,
			opts...,
		),
		editDepartment: connect.NewClient[v1.EditDepartmentRequest, emptypb.Empty](
			httpClient,
			baseURL+K8SDepartmentServiceEditDepartmentProcedure,
			opts...,
		),
		getDepartments: connect.NewClient[v1.GetDepartmentsRequest, v1.GetDepartmentsResponse](
			httpClient,
			baseURL+K8SDepartmentServiceGetDepartmentsProcedure,
			opts...,
		),
		deleteDepartments: connect.NewClient[v1.DeleteDepartmentsRequest, emptypb.Empty](
			httpClient,
			baseURL+K8SDepartmentServiceDeleteDepartmentsProcedure,
			opts...,
		),
	}
}

// k8SDepartmentServiceClient implements K8SDepartmentServiceClient.
type k8SDepartmentServiceClient struct {
	createDepartment  *connect.Client[v1.CreateDepartmentRequest, v1.CreateDepartmentResponse]
	editDepartment    *connect.Client[v1.EditDepartmentRequest, emptypb.Empty]
	getDepartments    *connect.Client[v1.GetDepartmentsRequest, v1.GetDepartmentsResponse]
	deleteDepartments *connect.Client[v1.DeleteDepartmentsRequest, emptypb.Empty]
}

// CreateDepartment calls api.v1.K8sDepartmentService.CreateDepartment.
func (c *k8SDepartmentServiceClient) CreateDepartment(ctx context.Context, req *connect.Request[v1.CreateDepartmentRequest]) (*connect.Response[v1.CreateDepartmentResponse], error) {
	return c.createDepartment.CallUnary(ctx, req)
}

// EditDepartment calls api.v1.K8sDepartmentService.EditDepartment.
func (c *k8SDepartmentServiceClient) EditDepartment(ctx context.Context, req *connect.Request[v1.EditDepartmentRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.editDepartment.CallUnary(ctx, req)
}

// GetDepartments calls api.v1.K8sDepartmentService.GetDepartments.
func (c *k8SDepartmentServiceClient) GetDepartments(ctx context.Context, req *connect.Request[v1.GetDepartmentsRequest]) (*connect.Response[v1.GetDepartmentsResponse], error) {
	return c.getDepartments.CallUnary(ctx, req)
}

// DeleteDepartments calls api.v1.K8sDepartmentService.DeleteDepartments.
func (c *k8SDepartmentServiceClient) DeleteDepartments(ctx context.Context, req *connect.Request[v1.DeleteDepartmentsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDepartments.CallUnary(ctx, req)
}

// K8SDepartmentServiceHandler is an implementation of the api.v1.K8sDepartmentService service.
type K8SDepartmentServiceHandler interface {
	CreateDepartment(context.Context, *connect.Request[v1.CreateDepartmentRequest]) (*connect.Response[v1.CreateDepartmentResponse], error)
	EditDepartment(context.Context, *connect.Request[v1.EditDepartmentRequest]) (*connect.Response[emptypb.Empty], error)
	GetDepartments(context.Context, *connect.Request[v1.GetDepartmentsRequest]) (*connect.Response[v1.GetDepartmentsResponse], error)
	DeleteDepartments(context.Context, *connect.Request[v1.DeleteDepartmentsRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewK8SDepartmentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewK8SDepartmentServiceHandler(svc K8SDepartmentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	k8SDepartmentServiceCreateDepartmentHandler := connect.NewUnaryHandler(
		K8SDepartmentServiceCreateDepartmentProcedure,
		svc.CreateDepartment,
		opts...,
	)
	k8SDepartmentServiceEditDepartmentHandler := connect.NewUnaryHandler(
		K8SDepartmentServiceEditDepartmentProcedure,
		svc.EditDepartment,
		opts...,
	)
	k8SDepartmentServiceGetDepartmentsHandler := connect.NewUnaryHandler(
		K8SDepartmentServiceGetDepartmentsProcedure,
		svc.GetDepartments,
		opts...,
	)
	k8SDepartmentServiceDeleteDepartmentsHandler := connect.NewUnaryHandler(
		K8SDepartmentServiceDeleteDepartmentsProcedure,
		svc.DeleteDepartments,
		opts...,
	)
	return "/api.v1.K8sDepartmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case K8SDepartmentServiceCreateDepartmentProcedure:
			k8SDepartmentServiceCreateDepartmentHandler.ServeHTTP(w, r)
		case K8SDepartmentServiceEditDepartmentProcedure:
			k8SDepartmentServiceEditDepartmentHandler.ServeHTTP(w, r)
		case K8SDepartmentServiceGetDepartmentsProcedure:
			k8SDepartmentServiceGetDepartmentsHandler.ServeHTTP(w, r)
		case K8SDepartmentServiceDeleteDepartmentsProcedure:
			k8SDepartmentServiceDeleteDepartmentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedK8SDepartmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedK8SDepartmentServiceHandler struct{}

func (UnimplementedK8SDepartmentServiceHandler) CreateDepartment(context.Context, *connect.Request[v1.CreateDepartmentRequest]) (*connect.Response[v1.CreateDepartmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sDepartmentService.CreateDepartment is not implemented"))
}

func (UnimplementedK8SDepartmentServiceHandler) EditDepartment(context.Context, *connect.Request[v1.EditDepartmentRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sDepartmentService.EditDepartment is not implemented"))
}

func (UnimplementedK8SDepartmentServiceHandler) GetDepartments(context.Context, *connect.Request[v1.GetDepartmentsRequest]) (*connect.Response[v1.GetDepartmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sDepartmentService.GetDepartments is not implemented"))
}

func (UnimplementedK8SDepartmentServiceHandler) DeleteDepartments(context.Context, *connect.Request[v1.DeleteDepartmentsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.K8sDepartmentService.DeleteDepartments is not implemented"))
}
