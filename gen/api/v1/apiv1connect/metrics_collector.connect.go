// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/metrics_collector.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/devzero-inc/zxporter/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// MetricsCollectorServiceName is the fully-qualified name of the MetricsCollectorService service.
	MetricsCollectorServiceName = "api.v1.MetricsCollectorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MetricsCollectorServiceSendResourceProcedure is the fully-qualified name of the
	// MetricsCollectorService's SendResource RPC.
	MetricsCollectorServiceSendResourceProcedure = "/api.v1.MetricsCollectorService/SendResource"
	// MetricsCollectorServiceSendResourceBatchProcedure is the fully-qualified name of the
	// MetricsCollectorService's SendResourceBatch RPC.
	MetricsCollectorServiceSendResourceBatchProcedure = "/api.v1.MetricsCollectorService/SendResourceBatch"
	// MetricsCollectorServiceSendTelemetryMetricsProcedure is the fully-qualified name of the
	// MetricsCollectorService's SendTelemetryMetrics RPC.
	MetricsCollectorServiceSendTelemetryMetricsProcedure = "/api.v1.MetricsCollectorService/SendTelemetryMetrics"
)

// MetricsCollectorServiceClient is a client for the api.v1.MetricsCollectorService service.
type MetricsCollectorServiceClient interface {
	// SendResource pushes a single metric for a resource.
	SendResource(context.Context, *connect.Request[v1.SendResourceRequest]) (*connect.Response[v1.SendResourceResponse], error)
	// SendResourceBatch pushes multiple metrics for resources of the same type.
	SendResourceBatch(context.Context, *connect.Request[v1.SendResourceBatchRequest]) (*connect.Response[v1.SendResourceBatchResponse], error)
	// SendTelemetryMetrics pushes a batch of telemetry metrics (gauges, counters, histograms) from a cluster.
	SendTelemetryMetrics(context.Context, *connect.Request[v1.SendTelemetryMetricsRequest]) (*connect.Response[v1.SendTelemetryMetricsResponse], error)
}

// NewMetricsCollectorServiceClient constructs a client for the api.v1.MetricsCollectorService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetricsCollectorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MetricsCollectorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &metricsCollectorServiceClient{
		sendResource: connect.NewClient[v1.SendResourceRequest, v1.SendResourceResponse](
			httpClient,
			baseURL+MetricsCollectorServiceSendResourceProcedure,
			opts...,
		),
		sendResourceBatch: connect.NewClient[v1.SendResourceBatchRequest, v1.SendResourceBatchResponse](
			httpClient,
			baseURL+MetricsCollectorServiceSendResourceBatchProcedure,
			opts...,
		),
		sendTelemetryMetrics: connect.NewClient[v1.SendTelemetryMetricsRequest, v1.SendTelemetryMetricsResponse](
			httpClient,
			baseURL+MetricsCollectorServiceSendTelemetryMetricsProcedure,
			opts...,
		),
	}
}

// metricsCollectorServiceClient implements MetricsCollectorServiceClient.
type metricsCollectorServiceClient struct {
	sendResource         *connect.Client[v1.SendResourceRequest, v1.SendResourceResponse]
	sendResourceBatch    *connect.Client[v1.SendResourceBatchRequest, v1.SendResourceBatchResponse]
	sendTelemetryMetrics *connect.Client[v1.SendTelemetryMetricsRequest, v1.SendTelemetryMetricsResponse]
}

// SendResource calls api.v1.MetricsCollectorService.SendResource.
func (c *metricsCollectorServiceClient) SendResource(ctx context.Context, req *connect.Request[v1.SendResourceRequest]) (*connect.Response[v1.SendResourceResponse], error) {
	return c.sendResource.CallUnary(ctx, req)
}

// SendResourceBatch calls api.v1.MetricsCollectorService.SendResourceBatch.
func (c *metricsCollectorServiceClient) SendResourceBatch(ctx context.Context, req *connect.Request[v1.SendResourceBatchRequest]) (*connect.Response[v1.SendResourceBatchResponse], error) {
	return c.sendResourceBatch.CallUnary(ctx, req)
}

// SendTelemetryMetrics calls api.v1.MetricsCollectorService.SendTelemetryMetrics.
func (c *metricsCollectorServiceClient) SendTelemetryMetrics(ctx context.Context, req *connect.Request[v1.SendTelemetryMetricsRequest]) (*connect.Response[v1.SendTelemetryMetricsResponse], error) {
	return c.sendTelemetryMetrics.CallUnary(ctx, req)
}

// MetricsCollectorServiceHandler is an implementation of the api.v1.MetricsCollectorService
// service.
type MetricsCollectorServiceHandler interface {
	// SendResource pushes a single metric for a resource.
	SendResource(context.Context, *connect.Request[v1.SendResourceRequest]) (*connect.Response[v1.SendResourceResponse], error)
	// SendResourceBatch pushes multiple metrics for resources of the same type.
	SendResourceBatch(context.Context, *connect.Request[v1.SendResourceBatchRequest]) (*connect.Response[v1.SendResourceBatchResponse], error)
	// SendTelemetryMetrics pushes a batch of telemetry metrics (gauges, counters, histograms) from a cluster.
	SendTelemetryMetrics(context.Context, *connect.Request[v1.SendTelemetryMetricsRequest]) (*connect.Response[v1.SendTelemetryMetricsResponse], error)
}

// NewMetricsCollectorServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetricsCollectorServiceHandler(svc MetricsCollectorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	metricsCollectorServiceSendResourceHandler := connect.NewUnaryHandler(
		MetricsCollectorServiceSendResourceProcedure,
		svc.SendResource,
		opts...,
	)
	metricsCollectorServiceSendResourceBatchHandler := connect.NewUnaryHandler(
		MetricsCollectorServiceSendResourceBatchProcedure,
		svc.SendResourceBatch,
		opts...,
	)
	metricsCollectorServiceSendTelemetryMetricsHandler := connect.NewUnaryHandler(
		MetricsCollectorServiceSendTelemetryMetricsProcedure,
		svc.SendTelemetryMetrics,
		opts...,
	)
	return "/api.v1.MetricsCollectorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MetricsCollectorServiceSendResourceProcedure:
			metricsCollectorServiceSendResourceHandler.ServeHTTP(w, r)
		case MetricsCollectorServiceSendResourceBatchProcedure:
			metricsCollectorServiceSendResourceBatchHandler.ServeHTTP(w, r)
		case MetricsCollectorServiceSendTelemetryMetricsProcedure:
			metricsCollectorServiceSendTelemetryMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMetricsCollectorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetricsCollectorServiceHandler struct{}

func (UnimplementedMetricsCollectorServiceHandler) SendResource(context.Context, *connect.Request[v1.SendResourceRequest]) (*connect.Response[v1.SendResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MetricsCollectorService.SendResource is not implemented"))
}

func (UnimplementedMetricsCollectorServiceHandler) SendResourceBatch(context.Context, *connect.Request[v1.SendResourceBatchRequest]) (*connect.Response[v1.SendResourceBatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MetricsCollectorService.SendResourceBatch is not implemented"))
}

func (UnimplementedMetricsCollectorServiceHandler) SendTelemetryMetrics(context.Context, *connect.Request[v1.SendTelemetryMetricsRequest]) (*connect.Response[v1.SendTelemetryMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MetricsCollectorService.SendTelemetryMetrics is not implemented"))
}
