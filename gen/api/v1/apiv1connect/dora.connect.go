// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/dora.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/devzero-inc/zxporter/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// DoraServiceName is the fully-qualified name of the DoraService service.
	DoraServiceName = "api.v1.DoraService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DoraServiceRegisterConnectionProcedure is the fully-qualified name of the DoraService's
	// RegisterConnection RPC.
	DoraServiceRegisterConnectionProcedure = "/api.v1.DoraService/RegisterConnection"
	// DoraServiceDeleteConnectionProcedure is the fully-qualified name of the DoraService's
	// DeleteConnection RPC.
	DoraServiceDeleteConnectionProcedure = "/api.v1.DoraService/DeleteConnection"
	// DoraServiceRegisterRepositoriesProcedure is the fully-qualified name of the DoraService's
	// RegisterRepositories RPC.
	DoraServiceRegisterRepositoriesProcedure = "/api.v1.DoraService/RegisterRepositories"
	// DoraServiceSearchRemoteRepositoriesProcedure is the fully-qualified name of the DoraService's
	// SearchRemoteRepositories RPC.
	DoraServiceSearchRemoteRepositoriesProcedure = "/api.v1.DoraService/SearchRemoteRepositories"
	// DoraServiceGetConnectionsProcedure is the fully-qualified name of the DoraService's
	// GetConnections RPC.
	DoraServiceGetConnectionsProcedure = "/api.v1.DoraService/GetConnections"
	// DoraServiceGetCodeActivityProcedure is the fully-qualified name of the DoraService's
	// GetCodeActivity RPC.
	DoraServiceGetCodeActivityProcedure = "/api.v1.DoraService/GetCodeActivity"
)

// DoraServiceClient is a client for the api.v1.DoraService service.
type DoraServiceClient interface {
	// RegisterConnection registers a new connection to a remote service (e.g., GitHub).
	RegisterConnection(context.Context, *connect.Request[v1.RegisterConnectionRequest]) (*connect.Response[v1.RegisterConnectionResponse], error)
	// DeleteConnection deletes a connection to a remote service (e.g., Github).
	DeleteConnection(context.Context, *connect.Request[v1.DeleteConnectionRequest]) (*connect.Response[v1.DeleteConnectionResponse], error)
	// RegisterRepositories associates repositories with an existing connection.
	RegisterRepositories(context.Context, *connect.Request[v1.RegisterRepositoriesRequest]) (*connect.Response[v1.RegisterRepositoriesResponse], error)
	// SearchRemoteRepositories searches for remote repositories using the specified connection and filters.
	SearchRemoteRepositories(context.Context, *connect.Request[v1.SearchRemoteRepositoriesRequest]) (*connect.Response[v1.SearchRemoteRepositoriesResponse], error)
	// GetConnections retrieves all connections associated with a specific team.
	GetConnections(context.Context, *connect.Request[v1.GetConnectionsRequest]) (*connect.Response[v1.GetConnectionsResponse], error)
	// GetCodeActivity retrieves DORA metrics for specific repositories over a given time range.
	GetCodeActivity(context.Context, *connect.Request[v1.GetCodeActivityRequest]) (*connect.Response[v1.GetCodeActivityResponse], error)
}

// NewDoraServiceClient constructs a client for the api.v1.DoraService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDoraServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DoraServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &doraServiceClient{
		registerConnection: connect.NewClient[v1.RegisterConnectionRequest, v1.RegisterConnectionResponse](
			httpClient,
			baseURL+DoraServiceRegisterConnectionProcedure,
			opts...,
		),
		deleteConnection: connect.NewClient[v1.DeleteConnectionRequest, v1.DeleteConnectionResponse](
			httpClient,
			baseURL+DoraServiceDeleteConnectionProcedure,
			opts...,
		),
		registerRepositories: connect.NewClient[v1.RegisterRepositoriesRequest, v1.RegisterRepositoriesResponse](
			httpClient,
			baseURL+DoraServiceRegisterRepositoriesProcedure,
			opts...,
		),
		searchRemoteRepositories: connect.NewClient[v1.SearchRemoteRepositoriesRequest, v1.SearchRemoteRepositoriesResponse](
			httpClient,
			baseURL+DoraServiceSearchRemoteRepositoriesProcedure,
			opts...,
		),
		getConnections: connect.NewClient[v1.GetConnectionsRequest, v1.GetConnectionsResponse](
			httpClient,
			baseURL+DoraServiceGetConnectionsProcedure,
			opts...,
		),
		getCodeActivity: connect.NewClient[v1.GetCodeActivityRequest, v1.GetCodeActivityResponse](
			httpClient,
			baseURL+DoraServiceGetCodeActivityProcedure,
			opts...,
		),
	}
}

// doraServiceClient implements DoraServiceClient.
type doraServiceClient struct {
	registerConnection       *connect.Client[v1.RegisterConnectionRequest, v1.RegisterConnectionResponse]
	deleteConnection         *connect.Client[v1.DeleteConnectionRequest, v1.DeleteConnectionResponse]
	registerRepositories     *connect.Client[v1.RegisterRepositoriesRequest, v1.RegisterRepositoriesResponse]
	searchRemoteRepositories *connect.Client[v1.SearchRemoteRepositoriesRequest, v1.SearchRemoteRepositoriesResponse]
	getConnections           *connect.Client[v1.GetConnectionsRequest, v1.GetConnectionsResponse]
	getCodeActivity          *connect.Client[v1.GetCodeActivityRequest, v1.GetCodeActivityResponse]
}

// RegisterConnection calls api.v1.DoraService.RegisterConnection.
func (c *doraServiceClient) RegisterConnection(ctx context.Context, req *connect.Request[v1.RegisterConnectionRequest]) (*connect.Response[v1.RegisterConnectionResponse], error) {
	return c.registerConnection.CallUnary(ctx, req)
}

// DeleteConnection calls api.v1.DoraService.DeleteConnection.
func (c *doraServiceClient) DeleteConnection(ctx context.Context, req *connect.Request[v1.DeleteConnectionRequest]) (*connect.Response[v1.DeleteConnectionResponse], error) {
	return c.deleteConnection.CallUnary(ctx, req)
}

// RegisterRepositories calls api.v1.DoraService.RegisterRepositories.
func (c *doraServiceClient) RegisterRepositories(ctx context.Context, req *connect.Request[v1.RegisterRepositoriesRequest]) (*connect.Response[v1.RegisterRepositoriesResponse], error) {
	return c.registerRepositories.CallUnary(ctx, req)
}

// SearchRemoteRepositories calls api.v1.DoraService.SearchRemoteRepositories.
func (c *doraServiceClient) SearchRemoteRepositories(ctx context.Context, req *connect.Request[v1.SearchRemoteRepositoriesRequest]) (*connect.Response[v1.SearchRemoteRepositoriesResponse], error) {
	return c.searchRemoteRepositories.CallUnary(ctx, req)
}

// GetConnections calls api.v1.DoraService.GetConnections.
func (c *doraServiceClient) GetConnections(ctx context.Context, req *connect.Request[v1.GetConnectionsRequest]) (*connect.Response[v1.GetConnectionsResponse], error) {
	return c.getConnections.CallUnary(ctx, req)
}

// GetCodeActivity calls api.v1.DoraService.GetCodeActivity.
func (c *doraServiceClient) GetCodeActivity(ctx context.Context, req *connect.Request[v1.GetCodeActivityRequest]) (*connect.Response[v1.GetCodeActivityResponse], error) {
	return c.getCodeActivity.CallUnary(ctx, req)
}

// DoraServiceHandler is an implementation of the api.v1.DoraService service.
type DoraServiceHandler interface {
	// RegisterConnection registers a new connection to a remote service (e.g., GitHub).
	RegisterConnection(context.Context, *connect.Request[v1.RegisterConnectionRequest]) (*connect.Response[v1.RegisterConnectionResponse], error)
	// DeleteConnection deletes a connection to a remote service (e.g., Github).
	DeleteConnection(context.Context, *connect.Request[v1.DeleteConnectionRequest]) (*connect.Response[v1.DeleteConnectionResponse], error)
	// RegisterRepositories associates repositories with an existing connection.
	RegisterRepositories(context.Context, *connect.Request[v1.RegisterRepositoriesRequest]) (*connect.Response[v1.RegisterRepositoriesResponse], error)
	// SearchRemoteRepositories searches for remote repositories using the specified connection and filters.
	SearchRemoteRepositories(context.Context, *connect.Request[v1.SearchRemoteRepositoriesRequest]) (*connect.Response[v1.SearchRemoteRepositoriesResponse], error)
	// GetConnections retrieves all connections associated with a specific team.
	GetConnections(context.Context, *connect.Request[v1.GetConnectionsRequest]) (*connect.Response[v1.GetConnectionsResponse], error)
	// GetCodeActivity retrieves DORA metrics for specific repositories over a given time range.
	GetCodeActivity(context.Context, *connect.Request[v1.GetCodeActivityRequest]) (*connect.Response[v1.GetCodeActivityResponse], error)
}

// NewDoraServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDoraServiceHandler(svc DoraServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	doraServiceRegisterConnectionHandler := connect.NewUnaryHandler(
		DoraServiceRegisterConnectionProcedure,
		svc.RegisterConnection,
		opts...,
	)
	doraServiceDeleteConnectionHandler := connect.NewUnaryHandler(
		DoraServiceDeleteConnectionProcedure,
		svc.DeleteConnection,
		opts...,
	)
	doraServiceRegisterRepositoriesHandler := connect.NewUnaryHandler(
		DoraServiceRegisterRepositoriesProcedure,
		svc.RegisterRepositories,
		opts...,
	)
	doraServiceSearchRemoteRepositoriesHandler := connect.NewUnaryHandler(
		DoraServiceSearchRemoteRepositoriesProcedure,
		svc.SearchRemoteRepositories,
		opts...,
	)
	doraServiceGetConnectionsHandler := connect.NewUnaryHandler(
		DoraServiceGetConnectionsProcedure,
		svc.GetConnections,
		opts...,
	)
	doraServiceGetCodeActivityHandler := connect.NewUnaryHandler(
		DoraServiceGetCodeActivityProcedure,
		svc.GetCodeActivity,
		opts...,
	)
	return "/api.v1.DoraService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DoraServiceRegisterConnectionProcedure:
			doraServiceRegisterConnectionHandler.ServeHTTP(w, r)
		case DoraServiceDeleteConnectionProcedure:
			doraServiceDeleteConnectionHandler.ServeHTTP(w, r)
		case DoraServiceRegisterRepositoriesProcedure:
			doraServiceRegisterRepositoriesHandler.ServeHTTP(w, r)
		case DoraServiceSearchRemoteRepositoriesProcedure:
			doraServiceSearchRemoteRepositoriesHandler.ServeHTTP(w, r)
		case DoraServiceGetConnectionsProcedure:
			doraServiceGetConnectionsHandler.ServeHTTP(w, r)
		case DoraServiceGetCodeActivityProcedure:
			doraServiceGetCodeActivityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDoraServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDoraServiceHandler struct{}

func (UnimplementedDoraServiceHandler) RegisterConnection(context.Context, *connect.Request[v1.RegisterConnectionRequest]) (*connect.Response[v1.RegisterConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DoraService.RegisterConnection is not implemented"))
}

func (UnimplementedDoraServiceHandler) DeleteConnection(context.Context, *connect.Request[v1.DeleteConnectionRequest]) (*connect.Response[v1.DeleteConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DoraService.DeleteConnection is not implemented"))
}

func (UnimplementedDoraServiceHandler) RegisterRepositories(context.Context, *connect.Request[v1.RegisterRepositoriesRequest]) (*connect.Response[v1.RegisterRepositoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DoraService.RegisterRepositories is not implemented"))
}

func (UnimplementedDoraServiceHandler) SearchRemoteRepositories(context.Context, *connect.Request[v1.SearchRemoteRepositoriesRequest]) (*connect.Response[v1.SearchRemoteRepositoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DoraService.SearchRemoteRepositories is not implemented"))
}

func (UnimplementedDoraServiceHandler) GetConnections(context.Context, *connect.Request[v1.GetConnectionsRequest]) (*connect.Response[v1.GetConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DoraService.GetConnections is not implemented"))
}

func (UnimplementedDoraServiceHandler) GetCodeActivity(context.Context, *connect.Request[v1.GetCodeActivityRequest]) (*connect.Response[v1.GetCodeActivityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DoraService.GetCodeActivity is not implemented"))
}
