// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: api/v1/dora.proto

package apiv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Repository represents details about a Git repository.
type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HtmlUrl  string `protobuf:"bytes,1,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`     // The HTML URL of the repository (e.g., GitHub page URL).
	CloneUrl string `protobuf:"bytes,2,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`  // The URL used to clone the repository.
	Fullname string `protobuf:"bytes,3,opt,name=fullname,proto3" json:"fullname,omitempty"`                  // Full name of the repository (e.g., owner/repo-name).
	GithubId int64  `protobuf:"varint,4,opt,name=github_id,json=githubId,proto3" json:"github_id,omitempty"` // Unique GitHub identifier for the repository.
	OwnerId  int64  `protobuf:"varint,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`    // Unique identifier for the owner of the repository.
	Name     string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                          // Name of the repository (without owner).
	Id       string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`                              // Internal unique identifier for the repository.
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{0}
}

func (x *Repository) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *Repository) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *Repository) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *Repository) GetGithubId() int64 {
	if x != nil {
		return x.GithubId
	}
	return 0
}

func (x *Repository) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// RemoteRepository represents a repository from a remote source (e.g., GitHub, GitLab).
type RemoteRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`             // Type of the remote repository (e.g., "group", "repository").
	Id         string      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                 // Unique identifier for the remote repository.
	Name       string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`             // Name of the remote repository.
	Fullname   string      `protobuf:"bytes,4,opt,name=fullname,proto3" json:"fullname,omitempty"`     // Full name of the remote repository (e.g., owner/repo-name).
	Repository *Repository `protobuf:"bytes,5,opt,name=repository,proto3" json:"repository,omitempty"` // Local repository details.
}

func (x *RemoteRepository) Reset() {
	*x = RemoteRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteRepository) ProtoMessage() {}

func (x *RemoteRepository) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteRepository.ProtoReflect.Descriptor instead.
func (*RemoteRepository) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{1}
}

func (x *RemoteRepository) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RemoteRepository) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoteRepository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteRepository) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *RemoteRepository) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

// Connection represents a user's connection to a remote service (e.g., GitHub).
type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                    // Unique identifier for the connection.
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                 // Name of the connection (e.g., "GitHub Connection").
	Repositories []*Repository `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"` // List of repositories associated with this connection.
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{2}
}

func (x *Connection) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Connection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connection) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

// RegisterConnectionRequest is used to register a new connection to a remote service.
type RegisterConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"` // Unique identifier for the user's team.
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`                 // Token (e.g., GitHub token) required to register the connection.
}

func (x *RegisterConnectionRequest) Reset() {
	*x = RegisterConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConnectionRequest) ProtoMessage() {}

func (x *RegisterConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConnectionRequest.ProtoReflect.Descriptor instead.
func (*RegisterConnectionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterConnectionRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *RegisterConnectionRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// DeleteConnectionRequest is used to delete a new connection to a remote service.
type DeleteConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId       string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                    // Unique identifier for the user's team.
	ConnectionId uint64 `protobuf:"varint,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"` // ID of the registered connection.
}

func (x *DeleteConnectionRequest) Reset() {
	*x = DeleteConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionRequest) ProtoMessage() {}

func (x *DeleteConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteConnectionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteConnectionRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *DeleteConnectionRequest) GetConnectionId() uint64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

// RegisterRepositoriesRequest is used to associate repositories with a registered connection.
type RegisterRepositoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId       string        `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                    // Unique identifier for the user's team.
	ConnectionId uint64        `protobuf:"varint,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"` // ID of the registered connection.
	Repositories []*Repository `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`                      // List of repositories to be registered.
}

func (x *RegisterRepositoriesRequest) Reset() {
	*x = RegisterRepositoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRepositoriesRequest) ProtoMessage() {}

func (x *RegisterRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRepositoriesRequest.ProtoReflect.Descriptor instead.
func (*RegisterRepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterRepositoriesRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *RegisterRepositoriesRequest) GetConnectionId() uint64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *RegisterRepositoriesRequest) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

// SearchRemoteRepositoriesRequest is used to search for remote repositories using filters.
type SearchRemoteRepositoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId int64   `protobuf:"varint,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"` // ID of the registered connection.
	Search       string  `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`                                  // Search string to filter repositories.
	GroupId      *string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`           // (Optional) Group identifier to filter repositories.
	SearchAll    bool    `protobuf:"varint,4,opt,name=search_all,json=searchAll,proto3" json:"search_all,omitempty"`          // Whether to search all repositories (ignoring filters).
}

func (x *SearchRemoteRepositoriesRequest) Reset() {
	*x = SearchRemoteRepositoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRemoteRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRemoteRepositoriesRequest) ProtoMessage() {}

func (x *SearchRemoteRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRemoteRepositoriesRequest.ProtoReflect.Descriptor instead.
func (*SearchRemoteRepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{6}
}

func (x *SearchRemoteRepositoriesRequest) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *SearchRemoteRepositoriesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *SearchRemoteRepositoriesRequest) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *SearchRemoteRepositoriesRequest) GetSearchAll() bool {
	if x != nil {
		return x.SearchAll
	}
	return false
}

// GetConnectionsRequest is used to retrieve all connections for a specific team.
type GetConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"` // Unique identifier for the user's team.
}

func (x *GetConnectionsRequest) Reset() {
	*x = GetConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionsRequest) ProtoMessage() {}

func (x *GetConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{7}
}

func (x *GetConnectionsRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

// GetCodeActivityRequest is used to retrieve DORA metrics for specific repositories over a time range.
type GetCodeActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId       *string  `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`  // (Optional) Unique identifier for the user's team.
	TimeFrom     int64    `protobuf:"varint,2,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"` // Start of the time range (UNIX timestamp in seconds).
	TimeTo       int64    `protobuf:"varint,3,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`       // End of the time range (UNIX timestamp in seconds).
	Repositories []string `protobuf:"bytes,4,rep,name=repositories,proto3" json:"repositories,omitempty"`          // List of repository identifiers to analyze.
}

func (x *GetCodeActivityRequest) Reset() {
	*x = GetCodeActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeActivityRequest) ProtoMessage() {}

func (x *GetCodeActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeActivityRequest.ProtoReflect.Descriptor instead.
func (*GetCodeActivityRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{8}
}

func (x *GetCodeActivityRequest) GetTeamId() string {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return ""
}

func (x *GetCodeActivityRequest) GetTimeFrom() int64 {
	if x != nil {
		return x.TimeFrom
	}
	return 0
}

func (x *GetCodeActivityRequest) GetTimeTo() int64 {
	if x != nil {
		return x.TimeTo
	}
	return 0
}

func (x *GetCodeActivityRequest) GetRepositories() []string {
	if x != nil {
		return x.Repositories
	}
	return nil
}

// RegisterConnectionResponse contains the result of a connection registration request.
type RegisterConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId int64 `protobuf:"varint,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"` // ID of the newly registered connection.
}

func (x *RegisterConnectionResponse) Reset() {
	*x = RegisterConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConnectionResponse) ProtoMessage() {}

func (x *RegisterConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConnectionResponse.ProtoReflect.Descriptor instead.
func (*RegisterConnectionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterConnectionResponse) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

// DeleteConnectionResponse contains the result of a connection delete request.
type DeleteConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteConnectionResponse) Reset() {
	*x = DeleteConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionResponse) ProtoMessage() {}

func (x *DeleteConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionResponse.ProtoReflect.Descriptor instead.
func (*DeleteConnectionResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{10}
}

// RegisterRepositoriesResponse contains the result of a repository registration request.
type RegisterRepositoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"` // List of repositories successfully registered.
}

func (x *RegisterRepositoriesResponse) Reset() {
	*x = RegisterRepositoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRepositoriesResponse) ProtoMessage() {}

func (x *RegisterRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRepositoriesResponse.ProtoReflect.Descriptor instead.
func (*RegisterRepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterRepositoriesResponse) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

// SearchRemoteRepositoriesResponse contains the result of a remote repository search.
type SearchRemoteRepositoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId       int64               `protobuf:"varint,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`                  // ID of the connection used to search repositories.
	RemoteRepositories []*RemoteRepository `protobuf:"bytes,2,rep,name=remote_repositories,json=remoteRepositories,proto3" json:"remote_repositories,omitempty"` // List of repositories matching the search criteria.
}

func (x *SearchRemoteRepositoriesResponse) Reset() {
	*x = SearchRemoteRepositoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRemoteRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRemoteRepositoriesResponse) ProtoMessage() {}

func (x *SearchRemoteRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRemoteRepositoriesResponse.ProtoReflect.Descriptor instead.
func (*SearchRemoteRepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{12}
}

func (x *SearchRemoteRepositoriesResponse) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *SearchRemoteRepositoriesResponse) GetRemoteRepositories() []*RemoteRepository {
	if x != nil {
		return x.RemoteRepositories
	}
	return nil
}

// GetConnectionsResponse contains the list of connections for a specific team.
type GetConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"` // List of connections associated with the team.
}

func (x *GetConnectionsResponse) Reset() {
	*x = GetConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionsResponse) ProtoMessage() {}

func (x *GetConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{13}
}

func (x *GetConnectionsResponse) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

// GetCodeActivityResponse contains DORA metrics and insights for a team or repositories.
type GetCodeActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeadTimeForMerge        float64 `protobuf:"fixed64,1,opt,name=lead_time_for_merge,json=leadTimeForMerge,proto3" json:"lead_time_for_merge,omitempty"`                        // Average time (in hours) from code commit to merge.
	LeadTimeForMergeChange  float64 `protobuf:"fixed64,2,opt,name=lead_time_for_merge_change,json=leadTimeForMergeChange,proto3" json:"lead_time_for_merge_change,omitempty"`    // Percentage change in lead time compared to the previous period.
	CodeCompletion          float64 `protobuf:"fixed64,3,opt,name=code_completion,json=codeCompletion,proto3" json:"code_completion,omitempty"`                                  // Percentage of code reviews or tasks completed.
	CodeCompletionChange    float64 `protobuf:"fixed64,4,opt,name=code_completion_change,json=codeCompletionChange,proto3" json:"code_completion_change,omitempty"`              // Percentage change in code completion compared to the previous period.
	PrFailureRate           float64 `protobuf:"fixed64,5,opt,name=pr_failure_rate,json=prFailureRate,proto3" json:"pr_failure_rate,omitempty"`                                   // Percentage of pull requests that failed (e.g., due to tests).
	PrFailureRateChange     float64 `protobuf:"fixed64,6,opt,name=pr_failure_rate_change,json=prFailureRateChange,proto3" json:"pr_failure_rate_change,omitempty"`               // Percentage change in PR failure rate compared to the previous period.
	TimeToFirstReview       float64 `protobuf:"fixed64,7,opt,name=time_to_first_review,json=timeToFirstReview,proto3" json:"time_to_first_review,omitempty"`                     // Average time (in hours) to the first review of a PR.
	TimeToFirstReviewChange float64 `protobuf:"fixed64,8,opt,name=time_to_first_review_change,json=timeToFirstReviewChange,proto3" json:"time_to_first_review_change,omitempty"` // Percentage change in time to first review compared to the previous period.
	IsReady                 bool    `protobuf:"varint,9,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`                                                        // Indicates if the metrics are ready for consumption.
}

func (x *GetCodeActivityResponse) Reset() {
	*x = GetCodeActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_dora_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeActivityResponse) ProtoMessage() {}

func (x *GetCodeActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_dora_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeActivityResponse.ProtoReflect.Descriptor instead.
func (*GetCodeActivityResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_dora_proto_rawDescGZIP(), []int{14}
}

func (x *GetCodeActivityResponse) GetLeadTimeForMerge() float64 {
	if x != nil {
		return x.LeadTimeForMerge
	}
	return 0
}

func (x *GetCodeActivityResponse) GetLeadTimeForMergeChange() float64 {
	if x != nil {
		return x.LeadTimeForMergeChange
	}
	return 0
}

func (x *GetCodeActivityResponse) GetCodeCompletion() float64 {
	if x != nil {
		return x.CodeCompletion
	}
	return 0
}

func (x *GetCodeActivityResponse) GetCodeCompletionChange() float64 {
	if x != nil {
		return x.CodeCompletionChange
	}
	return 0
}

func (x *GetCodeActivityResponse) GetPrFailureRate() float64 {
	if x != nil {
		return x.PrFailureRate
	}
	return 0
}

func (x *GetCodeActivityResponse) GetPrFailureRateChange() float64 {
	if x != nil {
		return x.PrFailureRateChange
	}
	return 0
}

func (x *GetCodeActivityResponse) GetTimeToFirstReview() float64 {
	if x != nil {
		return x.TimeToFirstReview
	}
	return 0
}

func (x *GetCodeActivityResponse) GetTimeToFirstReviewChange() float64 {
	if x != nil {
		return x.TimeToFirstReviewChange
	}
	return 0
}

func (x *GetCodeActivityResponse) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

var File_api_v1_dora_proto protoreflect.FileDescriptor

var file_api_v1_dora_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x22, 0xbc, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74,
	0x6d, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74,
	0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x68, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x4a, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a,
	0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x1a, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1a, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x1c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xca, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6c, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6c, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x32, 0xb8, 0x04, 0x0a, 0x0b, 0x44, 0x6f, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x82,
	0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x44,
	0x6f, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x7a, 0x65, 0x72, 0x6f, 0x2d, 0x69,
	0x6e, 0x63, 0x2f, 0x7a, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41,
	0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x41, 0x70,
	0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x41, 0x70, 0x69, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_dora_proto_rawDescOnce sync.Once
	file_api_v1_dora_proto_rawDescData = file_api_v1_dora_proto_rawDesc
)

func file_api_v1_dora_proto_rawDescGZIP() []byte {
	file_api_v1_dora_proto_rawDescOnce.Do(func() {
		file_api_v1_dora_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_dora_proto_rawDescData)
	})
	return file_api_v1_dora_proto_rawDescData
}

var file_api_v1_dora_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_v1_dora_proto_goTypes = []interface{}{
	(*Repository)(nil),                       // 0: api.v1.Repository
	(*RemoteRepository)(nil),                 // 1: api.v1.RemoteRepository
	(*Connection)(nil),                       // 2: api.v1.Connection
	(*RegisterConnectionRequest)(nil),        // 3: api.v1.RegisterConnectionRequest
	(*DeleteConnectionRequest)(nil),          // 4: api.v1.DeleteConnectionRequest
	(*RegisterRepositoriesRequest)(nil),      // 5: api.v1.RegisterRepositoriesRequest
	(*SearchRemoteRepositoriesRequest)(nil),  // 6: api.v1.SearchRemoteRepositoriesRequest
	(*GetConnectionsRequest)(nil),            // 7: api.v1.GetConnectionsRequest
	(*GetCodeActivityRequest)(nil),           // 8: api.v1.GetCodeActivityRequest
	(*RegisterConnectionResponse)(nil),       // 9: api.v1.RegisterConnectionResponse
	(*DeleteConnectionResponse)(nil),         // 10: api.v1.DeleteConnectionResponse
	(*RegisterRepositoriesResponse)(nil),     // 11: api.v1.RegisterRepositoriesResponse
	(*SearchRemoteRepositoriesResponse)(nil), // 12: api.v1.SearchRemoteRepositoriesResponse
	(*GetConnectionsResponse)(nil),           // 13: api.v1.GetConnectionsResponse
	(*GetCodeActivityResponse)(nil),          // 14: api.v1.GetCodeActivityResponse
}
var file_api_v1_dora_proto_depIdxs = []int32{
	0,  // 0: api.v1.RemoteRepository.repository:type_name -> api.v1.Repository
	0,  // 1: api.v1.Connection.repositories:type_name -> api.v1.Repository
	0,  // 2: api.v1.RegisterRepositoriesRequest.repositories:type_name -> api.v1.Repository
	0,  // 3: api.v1.RegisterRepositoriesResponse.repositories:type_name -> api.v1.Repository
	1,  // 4: api.v1.SearchRemoteRepositoriesResponse.remote_repositories:type_name -> api.v1.RemoteRepository
	2,  // 5: api.v1.GetConnectionsResponse.connections:type_name -> api.v1.Connection
	3,  // 6: api.v1.DoraService.RegisterConnection:input_type -> api.v1.RegisterConnectionRequest
	4,  // 7: api.v1.DoraService.DeleteConnection:input_type -> api.v1.DeleteConnectionRequest
	5,  // 8: api.v1.DoraService.RegisterRepositories:input_type -> api.v1.RegisterRepositoriesRequest
	6,  // 9: api.v1.DoraService.SearchRemoteRepositories:input_type -> api.v1.SearchRemoteRepositoriesRequest
	7,  // 10: api.v1.DoraService.GetConnections:input_type -> api.v1.GetConnectionsRequest
	8,  // 11: api.v1.DoraService.GetCodeActivity:input_type -> api.v1.GetCodeActivityRequest
	9,  // 12: api.v1.DoraService.RegisterConnection:output_type -> api.v1.RegisterConnectionResponse
	10, // 13: api.v1.DoraService.DeleteConnection:output_type -> api.v1.DeleteConnectionResponse
	11, // 14: api.v1.DoraService.RegisterRepositories:output_type -> api.v1.RegisterRepositoriesResponse
	12, // 15: api.v1.DoraService.SearchRemoteRepositories:output_type -> api.v1.SearchRemoteRepositoriesResponse
	13, // 16: api.v1.DoraService.GetConnections:output_type -> api.v1.GetConnectionsResponse
	14, // 17: api.v1.DoraService.GetCodeActivity:output_type -> api.v1.GetCodeActivityResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_v1_dora_proto_init() }
func file_api_v1_dora_proto_init() {
	if File_api_v1_dora_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_dora_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRepositoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRemoteRepositoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRepositoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRemoteRepositoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_dora_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_dora_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_api_v1_dora_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_dora_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_dora_proto_goTypes,
		DependencyIndexes: file_api_v1_dora_proto_depIdxs,
		MessageInfos:      file_api_v1_dora_proto_msgTypes,
	}.Build()
	File_api_v1_dora_proto = out.File
	file_api_v1_dora_proto_rawDesc = nil
	file_api_v1_dora_proto_goTypes = nil
	file_api_v1_dora_proto_depIdxs = nil
}
