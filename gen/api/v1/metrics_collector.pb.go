// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: api/v1/metrics_collector.proto

package apiv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ResourceType is a type of resource that can enter the system
type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0
	// Core Resources
	ResourceType_RESOURCE_TYPE_NODE            ResourceType = 1
	ResourceType_RESOURCE_TYPE_POD             ResourceType = 2
	ResourceType_RESOURCE_TYPE_NAMESPACE       ResourceType = 3
	ResourceType_RESOURCE_TYPE_EVENT           ResourceType = 4
	ResourceType_RESOURCE_TYPE_ENDPOINTS       ResourceType = 5
	ResourceType_RESOURCE_TYPE_SERVICE_ACCOUNT ResourceType = 6
	ResourceType_RESOURCE_TYPE_LIMIT_RANGE     ResourceType = 7
	ResourceType_RESOURCE_TYPE_RESOURCE_QUOTA  ResourceType = 8
	// Workload Resources
	ResourceType_RESOURCE_TYPE_DEPLOYMENT             ResourceType = 9
	ResourceType_RESOURCE_TYPE_STATEFUL_SET           ResourceType = 10
	ResourceType_RESOURCE_TYPE_DAEMON_SET             ResourceType = 11
	ResourceType_RESOURCE_TYPE_REPLICA_SET            ResourceType = 12
	ResourceType_RESOURCE_TYPE_REPLICATION_CONTROLLER ResourceType = 13
	ResourceType_RESOURCE_TYPE_JOB                    ResourceType = 14
	ResourceType_RESOURCE_TYPE_CRON_JOB               ResourceType = 15
	// Storage Resources
	ResourceType_RESOURCE_TYPE_PERSISTENT_VOLUME_CLAIM ResourceType = 16
	ResourceType_RESOURCE_TYPE_PERSISTENT_VOLUME       ResourceType = 17
	ResourceType_RESOURCE_TYPE_STORAGE_CLASS           ResourceType = 18
	// Networking Resources
	ResourceType_RESOURCE_TYPE_SERVICE        ResourceType = 19
	ResourceType_RESOURCE_TYPE_INGRESS        ResourceType = 20
	ResourceType_RESOURCE_TYPE_INGRESS_CLASS  ResourceType = 21
	ResourceType_RESOURCE_TYPE_NETWORK_POLICY ResourceType = 22
	// RBAC Resources
	ResourceType_RESOURCE_TYPE_ROLE                 ResourceType = 23
	ResourceType_RESOURCE_TYPE_ROLE_BINDING         ResourceType = 24
	ResourceType_RESOURCE_TYPE_CLUSTER_ROLE         ResourceType = 25
	ResourceType_RESOURCE_TYPE_CLUSTER_ROLE_BINDING ResourceType = 26
	// Autoscaling Resources
	ResourceType_RESOURCE_TYPE_HORIZONTAL_POD_AUTOSCALER ResourceType = 27
	ResourceType_RESOURCE_TYPE_VERTICAL_POD_AUTOSCALER   ResourceType = 28
	// Policy Resources
	ResourceType_RESOURCE_TYPE_POD_DISRUPTION_BUDGET ResourceType = 29
	ResourceType_RESOURCE_TYPE_POD_SECURITY_POLICY   ResourceType = 30
	// Custom Resources
	ResourceType_RESOURCE_TYPE_CUSTOM_RESOURCE_DEFINITION ResourceType = 31
	ResourceType_RESOURCE_TYPE_CUSTOM_RESOURCE            ResourceType = 32
	// Configuration Resources
	ResourceType_RESOURCE_TYPE_CONFIG_MAP ResourceType = 33
	ResourceType_RESOURCE_TYPE_SECRET     ResourceType = 34
	// Container and Resource specific types
	ResourceType_RESOURCE_TYPE_CONTAINER          ResourceType = 35
	ResourceType_RESOURCE_TYPE_NODE_RESOURCE      ResourceType = 36
	ResourceType_RESOURCE_TYPE_CONTAINER_RESOURCE ResourceType = 37
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0:  "RESOURCE_TYPE_UNSPECIFIED",
		1:  "RESOURCE_TYPE_NODE",
		2:  "RESOURCE_TYPE_POD",
		3:  "RESOURCE_TYPE_NAMESPACE",
		4:  "RESOURCE_TYPE_EVENT",
		5:  "RESOURCE_TYPE_ENDPOINTS",
		6:  "RESOURCE_TYPE_SERVICE_ACCOUNT",
		7:  "RESOURCE_TYPE_LIMIT_RANGE",
		8:  "RESOURCE_TYPE_RESOURCE_QUOTA",
		9:  "RESOURCE_TYPE_DEPLOYMENT",
		10: "RESOURCE_TYPE_STATEFUL_SET",
		11: "RESOURCE_TYPE_DAEMON_SET",
		12: "RESOURCE_TYPE_REPLICA_SET",
		13: "RESOURCE_TYPE_REPLICATION_CONTROLLER",
		14: "RESOURCE_TYPE_JOB",
		15: "RESOURCE_TYPE_CRON_JOB",
		16: "RESOURCE_TYPE_PERSISTENT_VOLUME_CLAIM",
		17: "RESOURCE_TYPE_PERSISTENT_VOLUME",
		18: "RESOURCE_TYPE_STORAGE_CLASS",
		19: "RESOURCE_TYPE_SERVICE",
		20: "RESOURCE_TYPE_INGRESS",
		21: "RESOURCE_TYPE_INGRESS_CLASS",
		22: "RESOURCE_TYPE_NETWORK_POLICY",
		23: "RESOURCE_TYPE_ROLE",
		24: "RESOURCE_TYPE_ROLE_BINDING",
		25: "RESOURCE_TYPE_CLUSTER_ROLE",
		26: "RESOURCE_TYPE_CLUSTER_ROLE_BINDING",
		27: "RESOURCE_TYPE_HORIZONTAL_POD_AUTOSCALER",
		28: "RESOURCE_TYPE_VERTICAL_POD_AUTOSCALER",
		29: "RESOURCE_TYPE_POD_DISRUPTION_BUDGET",
		30: "RESOURCE_TYPE_POD_SECURITY_POLICY",
		31: "RESOURCE_TYPE_CUSTOM_RESOURCE_DEFINITION",
		32: "RESOURCE_TYPE_CUSTOM_RESOURCE",
		33: "RESOURCE_TYPE_CONFIG_MAP",
		34: "RESOURCE_TYPE_SECRET",
		35: "RESOURCE_TYPE_CONTAINER",
		36: "RESOURCE_TYPE_NODE_RESOURCE",
		37: "RESOURCE_TYPE_CONTAINER_RESOURCE",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED":                0,
		"RESOURCE_TYPE_NODE":                       1,
		"RESOURCE_TYPE_POD":                        2,
		"RESOURCE_TYPE_NAMESPACE":                  3,
		"RESOURCE_TYPE_EVENT":                      4,
		"RESOURCE_TYPE_ENDPOINTS":                  5,
		"RESOURCE_TYPE_SERVICE_ACCOUNT":            6,
		"RESOURCE_TYPE_LIMIT_RANGE":                7,
		"RESOURCE_TYPE_RESOURCE_QUOTA":             8,
		"RESOURCE_TYPE_DEPLOYMENT":                 9,
		"RESOURCE_TYPE_STATEFUL_SET":               10,
		"RESOURCE_TYPE_DAEMON_SET":                 11,
		"RESOURCE_TYPE_REPLICA_SET":                12,
		"RESOURCE_TYPE_REPLICATION_CONTROLLER":     13,
		"RESOURCE_TYPE_JOB":                        14,
		"RESOURCE_TYPE_CRON_JOB":                   15,
		"RESOURCE_TYPE_PERSISTENT_VOLUME_CLAIM":    16,
		"RESOURCE_TYPE_PERSISTENT_VOLUME":          17,
		"RESOURCE_TYPE_STORAGE_CLASS":              18,
		"RESOURCE_TYPE_SERVICE":                    19,
		"RESOURCE_TYPE_INGRESS":                    20,
		"RESOURCE_TYPE_INGRESS_CLASS":              21,
		"RESOURCE_TYPE_NETWORK_POLICY":             22,
		"RESOURCE_TYPE_ROLE":                       23,
		"RESOURCE_TYPE_ROLE_BINDING":               24,
		"RESOURCE_TYPE_CLUSTER_ROLE":               25,
		"RESOURCE_TYPE_CLUSTER_ROLE_BINDING":       26,
		"RESOURCE_TYPE_HORIZONTAL_POD_AUTOSCALER":  27,
		"RESOURCE_TYPE_VERTICAL_POD_AUTOSCALER":    28,
		"RESOURCE_TYPE_POD_DISRUPTION_BUDGET":      29,
		"RESOURCE_TYPE_POD_SECURITY_POLICY":        30,
		"RESOURCE_TYPE_CUSTOM_RESOURCE_DEFINITION": 31,
		"RESOURCE_TYPE_CUSTOM_RESOURCE":            32,
		"RESOURCE_TYPE_CONFIG_MAP":                 33,
		"RESOURCE_TYPE_SECRET":                     34,
		"RESOURCE_TYPE_CONTAINER":                  35,
		"RESOURCE_TYPE_NODE_RESOURCE":              36,
		"RESOURCE_TYPE_CONTAINER_RESOURCE":         37,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_metrics_collector_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_api_v1_metrics_collector_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_metrics_collector_proto_rawDescGZIP(), []int{0}
}

// Requests
// SendRequest is used to push metrics for a single resource.
type SendResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of resource (pod, container, node_resources, etc.)
	ResourceType ResourceType `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=api.v1.ResourceType" json:"resource_type,omitempty"`
	// Unique identifier for the resource
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Timestamp when the resource was collected
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Event type (add, update, delete, metrics, etc.)
	EventType string `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// The actual resource data as a flexible structure
	Data *structpb.Struct `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SendResourceRequest) Reset() {
	*x = SendResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_metrics_collector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResourceRequest) ProtoMessage() {}

func (x *SendResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_metrics_collector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResourceRequest.ProtoReflect.Descriptor instead.
func (*SendResourceRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_metrics_collector_proto_rawDescGZIP(), []int{0}
}

func (x *SendResourceRequest) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *SendResourceRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SendResourceRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SendResourceRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *SendResourceRequest) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

// Responses
// Common response for all send operations
type SendResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendResourceResponse) Reset() {
	*x = SendResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_metrics_collector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResourceResponse) ProtoMessage() {}

func (x *SendResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_metrics_collector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResourceResponse.ProtoReflect.Descriptor instead.
func (*SendResourceResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_metrics_collector_proto_rawDescGZIP(), []int{1}
}

var File_api_v1_metrics_collector_proto protoreflect.FileDescriptor

var file_api_v1_metrics_collector_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xea, 0x09, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x20,
	0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x08,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x28, 0x0a, 0x24, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52,
	0x4f, 0x4e, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x49,
	0x4d, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x14, 0x12,
	0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x15,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x19, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x1a, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x50,
	0x4f, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x1b, 0x12,
	0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x1c, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x5f,
	0x44, 0x49, 0x53, 0x52, 0x55, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x44, 0x47, 0x45,
	0x54, 0x10, 0x1d, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x1e, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45,
	0x54, 0x10, 0x22, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x23,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x24, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x25, 0x32, 0x64, 0x0a, 0x17, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x8e, 0x01,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x65, 0x76, 0x7a, 0x65, 0x72, 0x6f, 0x2d, 0x69, 0x6e, 0x63, 0x2f, 0x7a, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x12, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_metrics_collector_proto_rawDescOnce sync.Once
	file_api_v1_metrics_collector_proto_rawDescData = file_api_v1_metrics_collector_proto_rawDesc
)

func file_api_v1_metrics_collector_proto_rawDescGZIP() []byte {
	file_api_v1_metrics_collector_proto_rawDescOnce.Do(func() {
		file_api_v1_metrics_collector_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_metrics_collector_proto_rawDescData)
	})
	return file_api_v1_metrics_collector_proto_rawDescData
}

var file_api_v1_metrics_collector_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_metrics_collector_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_v1_metrics_collector_proto_goTypes = []interface{}{
	(ResourceType)(0),             // 0: api.v1.ResourceType
	(*SendResourceRequest)(nil),   // 1: api.v1.SendResourceRequest
	(*SendResourceResponse)(nil),  // 2: api.v1.SendResourceResponse
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 4: google.protobuf.Struct
}
var file_api_v1_metrics_collector_proto_depIdxs = []int32{
	0, // 0: api.v1.SendResourceRequest.resource_type:type_name -> api.v1.ResourceType
	3, // 1: api.v1.SendResourceRequest.timestamp:type_name -> google.protobuf.Timestamp
	4, // 2: api.v1.SendResourceRequest.data:type_name -> google.protobuf.Struct
	1, // 3: api.v1.MetricsCollectorService.SendResource:input_type -> api.v1.SendResourceRequest
	2, // 4: api.v1.MetricsCollectorService.SendResource:output_type -> api.v1.SendResourceResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_api_v1_metrics_collector_proto_init() }
func file_api_v1_metrics_collector_proto_init() {
	if File_api_v1_metrics_collector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_metrics_collector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_metrics_collector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_metrics_collector_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_metrics_collector_proto_goTypes,
		DependencyIndexes: file_api_v1_metrics_collector_proto_depIdxs,
		EnumInfos:         file_api_v1_metrics_collector_proto_enumTypes,
		MessageInfos:      file_api_v1_metrics_collector_proto_msgTypes,
	}.Build()
	File_api_v1_metrics_collector_proto = out.File
	file_api_v1_metrics_collector_proto_rawDesc = nil
	file_api_v1_metrics_collector_proto_goTypes = nil
	file_api_v1_metrics_collector_proto_depIdxs = nil
}
