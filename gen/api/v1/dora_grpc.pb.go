// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/dora.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DoraService_RegisterConnection_FullMethodName       = "/api.v1.DoraService/RegisterConnection"
	DoraService_DeleteConnection_FullMethodName         = "/api.v1.DoraService/DeleteConnection"
	DoraService_RegisterRepositories_FullMethodName     = "/api.v1.DoraService/RegisterRepositories"
	DoraService_SearchRemoteRepositories_FullMethodName = "/api.v1.DoraService/SearchRemoteRepositories"
	DoraService_GetConnections_FullMethodName           = "/api.v1.DoraService/GetConnections"
	DoraService_GetCodeActivity_FullMethodName          = "/api.v1.DoraService/GetCodeActivity"
)

// DoraServiceClient is the client API for DoraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoraServiceClient interface {
	// RegisterConnection registers a new connection to a remote service (e.g., GitHub).
	RegisterConnection(ctx context.Context, in *RegisterConnectionRequest, opts ...grpc.CallOption) (*RegisterConnectionResponse, error)
	// DeleteConnection deletes a connection to a remote service (e.g., Github).
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error)
	// RegisterRepositories associates repositories with an existing connection.
	RegisterRepositories(ctx context.Context, in *RegisterRepositoriesRequest, opts ...grpc.CallOption) (*RegisterRepositoriesResponse, error)
	// SearchRemoteRepositories searches for remote repositories using the specified connection and filters.
	SearchRemoteRepositories(ctx context.Context, in *SearchRemoteRepositoriesRequest, opts ...grpc.CallOption) (*SearchRemoteRepositoriesResponse, error)
	// GetConnections retrieves all connections associated with a specific team.
	GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error)
	// GetCodeActivity retrieves DORA metrics for specific repositories over a given time range.
	GetCodeActivity(ctx context.Context, in *GetCodeActivityRequest, opts ...grpc.CallOption) (*GetCodeActivityResponse, error)
}

type doraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoraServiceClient(cc grpc.ClientConnInterface) DoraServiceClient {
	return &doraServiceClient{cc}
}

func (c *doraServiceClient) RegisterConnection(ctx context.Context, in *RegisterConnectionRequest, opts ...grpc.CallOption) (*RegisterConnectionResponse, error) {
	out := new(RegisterConnectionResponse)
	err := c.cc.Invoke(ctx, DoraService_RegisterConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doraServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error) {
	out := new(DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, DoraService_DeleteConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doraServiceClient) RegisterRepositories(ctx context.Context, in *RegisterRepositoriesRequest, opts ...grpc.CallOption) (*RegisterRepositoriesResponse, error) {
	out := new(RegisterRepositoriesResponse)
	err := c.cc.Invoke(ctx, DoraService_RegisterRepositories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doraServiceClient) SearchRemoteRepositories(ctx context.Context, in *SearchRemoteRepositoriesRequest, opts ...grpc.CallOption) (*SearchRemoteRepositoriesResponse, error) {
	out := new(SearchRemoteRepositoriesResponse)
	err := c.cc.Invoke(ctx, DoraService_SearchRemoteRepositories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doraServiceClient) GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error) {
	out := new(GetConnectionsResponse)
	err := c.cc.Invoke(ctx, DoraService_GetConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doraServiceClient) GetCodeActivity(ctx context.Context, in *GetCodeActivityRequest, opts ...grpc.CallOption) (*GetCodeActivityResponse, error) {
	out := new(GetCodeActivityResponse)
	err := c.cc.Invoke(ctx, DoraService_GetCodeActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoraServiceServer is the server API for DoraService service.
// All implementations must embed UnimplementedDoraServiceServer
// for forward compatibility
type DoraServiceServer interface {
	// RegisterConnection registers a new connection to a remote service (e.g., GitHub).
	RegisterConnection(context.Context, *RegisterConnectionRequest) (*RegisterConnectionResponse, error)
	// DeleteConnection deletes a connection to a remote service (e.g., Github).
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error)
	// RegisterRepositories associates repositories with an existing connection.
	RegisterRepositories(context.Context, *RegisterRepositoriesRequest) (*RegisterRepositoriesResponse, error)
	// SearchRemoteRepositories searches for remote repositories using the specified connection and filters.
	SearchRemoteRepositories(context.Context, *SearchRemoteRepositoriesRequest) (*SearchRemoteRepositoriesResponse, error)
	// GetConnections retrieves all connections associated with a specific team.
	GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error)
	// GetCodeActivity retrieves DORA metrics for specific repositories over a given time range.
	GetCodeActivity(context.Context, *GetCodeActivityRequest) (*GetCodeActivityResponse, error)
	mustEmbedUnimplementedDoraServiceServer()
}

// UnimplementedDoraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDoraServiceServer struct {
}

func (UnimplementedDoraServiceServer) RegisterConnection(context.Context, *RegisterConnectionRequest) (*RegisterConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConnection not implemented")
}
func (UnimplementedDoraServiceServer) DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedDoraServiceServer) RegisterRepositories(context.Context, *RegisterRepositoriesRequest) (*RegisterRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRepositories not implemented")
}
func (UnimplementedDoraServiceServer) SearchRemoteRepositories(context.Context, *SearchRemoteRepositoriesRequest) (*SearchRemoteRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRemoteRepositories not implemented")
}
func (UnimplementedDoraServiceServer) GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedDoraServiceServer) GetCodeActivity(context.Context, *GetCodeActivityRequest) (*GetCodeActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeActivity not implemented")
}
func (UnimplementedDoraServiceServer) mustEmbedUnimplementedDoraServiceServer() {}

// UnsafeDoraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoraServiceServer will
// result in compilation errors.
type UnsafeDoraServiceServer interface {
	mustEmbedUnimplementedDoraServiceServer()
}

func RegisterDoraServiceServer(s grpc.ServiceRegistrar, srv DoraServiceServer) {
	s.RegisterService(&DoraService_ServiceDesc, srv)
}

func _DoraService_RegisterConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoraServiceServer).RegisterConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoraService_RegisterConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoraServiceServer).RegisterConnection(ctx, req.(*RegisterConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoraService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoraServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoraService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoraServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoraService_RegisterRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoraServiceServer).RegisterRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoraService_RegisterRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoraServiceServer).RegisterRepositories(ctx, req.(*RegisterRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoraService_SearchRemoteRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRemoteRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoraServiceServer).SearchRemoteRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoraService_SearchRemoteRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoraServiceServer).SearchRemoteRepositories(ctx, req.(*SearchRemoteRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoraService_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoraServiceServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoraService_GetConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoraServiceServer).GetConnections(ctx, req.(*GetConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoraService_GetCodeActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoraServiceServer).GetCodeActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoraService_GetCodeActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoraServiceServer).GetCodeActivity(ctx, req.(*GetCodeActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoraService_ServiceDesc is the grpc.ServiceDesc for DoraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DoraService",
	HandlerType: (*DoraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterConnection",
			Handler:    _DoraService_RegisterConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _DoraService_DeleteConnection_Handler,
		},
		{
			MethodName: "RegisterRepositories",
			Handler:    _DoraService_RegisterRepositories_Handler,
		},
		{
			MethodName: "SearchRemoteRepositories",
			Handler:    _DoraService_SearchRemoteRepositories_Handler,
		},
		{
			MethodName: "GetConnections",
			Handler:    _DoraService_GetConnections_Handler,
		},
		{
			MethodName: "GetCodeActivity",
			Handler:    _DoraService_GetCodeActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/dora.proto",
}
