// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/lda.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LdaService_GetDevelopmentActivity_FullMethodName = "/api.v1.LdaService/GetDevelopmentActivity"
)

// LdaServiceClient is the client API for LdaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LdaServiceClient interface {
	// GetDevelopmentActivity retrieves metrics and insights about development activity.
	GetDevelopmentActivity(ctx context.Context, in *GetDevelopmentActivityRequest, opts ...grpc.CallOption) (*GetDevelopmentActivityResponse, error)
}

type ldaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLdaServiceClient(cc grpc.ClientConnInterface) LdaServiceClient {
	return &ldaServiceClient{cc}
}

func (c *ldaServiceClient) GetDevelopmentActivity(ctx context.Context, in *GetDevelopmentActivityRequest, opts ...grpc.CallOption) (*GetDevelopmentActivityResponse, error) {
	out := new(GetDevelopmentActivityResponse)
	err := c.cc.Invoke(ctx, LdaService_GetDevelopmentActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LdaServiceServer is the server API for LdaService service.
// All implementations must embed UnimplementedLdaServiceServer
// for forward compatibility
type LdaServiceServer interface {
	// GetDevelopmentActivity retrieves metrics and insights about development activity.
	GetDevelopmentActivity(context.Context, *GetDevelopmentActivityRequest) (*GetDevelopmentActivityResponse, error)
	mustEmbedUnimplementedLdaServiceServer()
}

// UnimplementedLdaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLdaServiceServer struct {
}

func (UnimplementedLdaServiceServer) GetDevelopmentActivity(context.Context, *GetDevelopmentActivityRequest) (*GetDevelopmentActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevelopmentActivity not implemented")
}
func (UnimplementedLdaServiceServer) mustEmbedUnimplementedLdaServiceServer() {}

// UnsafeLdaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LdaServiceServer will
// result in compilation errors.
type UnsafeLdaServiceServer interface {
	mustEmbedUnimplementedLdaServiceServer()
}

func RegisterLdaServiceServer(s grpc.ServiceRegistrar, srv LdaServiceServer) {
	s.RegisterService(&LdaService_ServiceDesc, srv)
}

func _LdaService_GetDevelopmentActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevelopmentActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdaServiceServer).GetDevelopmentActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdaService_GetDevelopmentActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdaServiceServer).GetDevelopmentActivity(ctx, req.(*GetDevelopmentActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LdaService_ServiceDesc is the grpc.ServiceDesc for LdaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LdaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.LdaService",
	HandlerType: (*LdaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevelopmentActivity",
			Handler:    _LdaService_GetDevelopmentActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/lda.proto",
}
