// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/k8s.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	K8SService_GetClusters_FullMethodName         = "/api.v1.K8SService/GetClusters"
	K8SService_GetCluster_FullMethodName          = "/api.v1.K8SService/GetCluster"
	K8SService_GetClusterAnalytics_FullMethodName = "/api.v1.K8SService/GetClusterAnalytics"
	K8SService_GetNodes_FullMethodName            = "/api.v1.K8SService/GetNodes"
	K8SService_GetNodeGroups_FullMethodName       = "/api.v1.K8SService/GetNodeGroups"
	K8SService_GetNamespaces_FullMethodName       = "/api.v1.K8SService/GetNamespaces"
	K8SService_GetResources_FullMethodName        = "/api.v1.K8SService/GetResources"
	K8SService_GetNodeMetrics_FullMethodName      = "/api.v1.K8SService/GetNodeMetrics"
	K8SService_GetPodMetrics_FullMethodName       = "/api.v1.K8SService/GetPodMetrics"
)

// K8SServiceClient is the client API for K8SService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SServiceClient interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error)
	// GetCluster retrieves cluster details for a team.
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error)
	// GetClusterAnalytics get cluster analytics
	GetClusterAnalytics(ctx context.Context, in *GetClusterAnalyticsRequest, opts ...grpc.CallOption) (*GetClusterAnalyticsResponse, error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodeGroups(ctx context.Context, in *GetNodeGroupsRequest, opts ...grpc.CallOption) (*GetNodeGroupsResponse, error)
	// GetNamespaces retrieves all namespaces for a specific cluster.
	GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error)
	// GetResources retrieves resources for a specific namespace, optionally filtered by kind.
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	// GetNodeMetrics retrieves time-series metrics for a specific node.
	GetNodeMetrics(ctx context.Context, in *GetNodeMetricsRequest, opts ...grpc.CallOption) (*GetNodeMetricsResponse, error)
	// GetPodMetrics retrieves time-series metrics for a specific pod.
	GetPodMetrics(ctx context.Context, in *GetPodMetricsRequest, opts ...grpc.CallOption) (*GetPodMetricsResponse, error)
}

type k8SServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SServiceClient(cc grpc.ClientConnInterface) K8SServiceClient {
	return &k8SServiceClient{cc}
}

func (c *k8SServiceClient) GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error) {
	out := new(GetClustersResponse)
	err := c.cc.Invoke(ctx, K8SService_GetClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error) {
	out := new(GetClusterResponse)
	err := c.cc.Invoke(ctx, K8SService_GetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetClusterAnalytics(ctx context.Context, in *GetClusterAnalyticsRequest, opts ...grpc.CallOption) (*GetClusterAnalyticsResponse, error) {
	out := new(GetClusterAnalyticsResponse)
	err := c.cc.Invoke(ctx, K8SService_GetClusterAnalytics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeGroups(ctx context.Context, in *GetNodeGroupsRequest, opts ...grpc.CallOption) (*GetNodeGroupsResponse, error) {
	out := new(GetNodeGroupsResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error) {
	out := new(GetNamespacesResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, K8SService_GetResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeMetrics(ctx context.Context, in *GetNodeMetricsRequest, opts ...grpc.CallOption) (*GetNodeMetricsResponse, error) {
	out := new(GetNodeMetricsResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetPodMetrics(ctx context.Context, in *GetPodMetricsRequest, opts ...grpc.CallOption) (*GetPodMetricsResponse, error) {
	out := new(GetPodMetricsResponse)
	err := c.cc.Invoke(ctx, K8SService_GetPodMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SServiceServer is the server API for K8SService service.
// All implementations must embed UnimplementedK8SServiceServer
// for forward compatibility
type K8SServiceServer interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error)
	// GetCluster retrieves cluster details for a team.
	GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error)
	// GetClusterAnalytics get cluster analytics
	GetClusterAnalytics(context.Context, *GetClusterAnalyticsRequest) (*GetClusterAnalyticsResponse, error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodeGroups(context.Context, *GetNodeGroupsRequest) (*GetNodeGroupsResponse, error)
	// GetNamespaces retrieves all namespaces for a specific cluster.
	GetNamespaces(context.Context, *GetNamespacesRequest) (*GetNamespacesResponse, error)
	// GetResources retrieves resources for a specific namespace, optionally filtered by kind.
	GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error)
	// GetNodeMetrics retrieves time-series metrics for a specific node.
	GetNodeMetrics(context.Context, *GetNodeMetricsRequest) (*GetNodeMetricsResponse, error)
	// GetPodMetrics retrieves time-series metrics for a specific pod.
	GetPodMetrics(context.Context, *GetPodMetricsRequest) (*GetPodMetricsResponse, error)
	mustEmbedUnimplementedK8SServiceServer()
}

// UnimplementedK8SServiceServer must be embedded to have forward compatible implementations.
type UnimplementedK8SServiceServer struct {
}

func (UnimplementedK8SServiceServer) GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedK8SServiceServer) GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedK8SServiceServer) GetClusterAnalytics(context.Context, *GetClusterAnalyticsRequest) (*GetClusterAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterAnalytics not implemented")
}
func (UnimplementedK8SServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeGroups(context.Context, *GetNodeGroupsRequest) (*GetNodeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroups not implemented")
}
func (UnimplementedK8SServiceServer) GetNamespaces(context.Context, *GetNamespacesRequest) (*GetNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (UnimplementedK8SServiceServer) GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeMetrics(context.Context, *GetNodeMetricsRequest) (*GetNodeMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMetrics not implemented")
}
func (UnimplementedK8SServiceServer) GetPodMetrics(context.Context, *GetPodMetricsRequest) (*GetPodMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodMetrics not implemented")
}
func (UnimplementedK8SServiceServer) mustEmbedUnimplementedK8SServiceServer() {}

// UnsafeK8SServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SServiceServer will
// result in compilation errors.
type UnsafeK8SServiceServer interface {
	mustEmbedUnimplementedK8SServiceServer()
}

func RegisterK8SServiceServer(s grpc.ServiceRegistrar, srv K8SServiceServer) {
	s.RegisterService(&K8SService_ServiceDesc, srv)
}

func _K8SService_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetClusters(ctx, req.(*GetClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetClusterAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetClusterAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetClusterAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetClusterAnalytics(ctx, req.(*GetClusterAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeGroups(ctx, req.(*GetNodeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNamespaces(ctx, req.(*GetNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetResources(ctx, req.(*GetResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeMetrics(ctx, req.(*GetNodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetPodMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetPodMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetPodMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetPodMetrics(ctx, req.(*GetPodMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SService_ServiceDesc is the grpc.ServiceDesc for K8SService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.K8SService",
	HandlerType: (*K8SServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusters",
			Handler:    _K8SService_GetClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _K8SService_GetCluster_Handler,
		},
		{
			MethodName: "GetClusterAnalytics",
			Handler:    _K8SService_GetClusterAnalytics_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _K8SService_GetNodes_Handler,
		},
		{
			MethodName: "GetNodeGroups",
			Handler:    _K8SService_GetNodeGroups_Handler,
		},
		{
			MethodName: "GetNamespaces",
			Handler:    _K8SService_GetNamespaces_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _K8SService_GetResources_Handler,
		},
		{
			MethodName: "GetNodeMetrics",
			Handler:    _K8SService_GetNodeMetrics_Handler,
		},
		{
			MethodName: "GetPodMetrics",
			Handler:    _K8SService_GetPodMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/k8s.proto",
}
