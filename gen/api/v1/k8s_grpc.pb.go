// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/k8s.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	K8SService_GetClusters_FullMethodName   = "/api.v1.K8SService/GetClusters"
	K8SService_GetCluster_FullMethodName    = "/api.v1.K8SService/GetCluster"
	K8SService_GetNodeGroups_FullMethodName = "/api.v1.K8SService/GetNodeGroups"
	K8SService_GetNode_FullMethodName       = "/api.v1.K8SService/GetNode"
	K8SService_GetWorkloads_FullMethodName  = "/api.v1.K8SService/GetWorkloads"
	K8SService_GetWorkload_FullMethodName   = "/api.v1.K8SService/GetWorkload"
)

// K8SServiceClient is the client API for K8SService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SServiceClient interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error)
	// GetCluster retrieves detailed information for a specific cluster.
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error)
	// GetNodeGroups retrieves all node groups for a specific cluster.
	GetNodeGroups(ctx context.Context, in *GetNodeGroupsRequest, opts ...grpc.CallOption) (*GetNodeGroupsResponse, error)
	// GetNode retrieves detailed information for a specific node.
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// GetWorkloads retrieves all workloads for a specific cluster.
	GetWorkloads(ctx context.Context, in *GetWorkloadsRequest, opts ...grpc.CallOption) (*GetWorkloadsResponse, error)
	// GetWorkload retrieves detailed information for a specific workload.
	GetWorkload(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*GetWorkloadResponse, error)
}

type k8SServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SServiceClient(cc grpc.ClientConnInterface) K8SServiceClient {
	return &k8SServiceClient{cc}
}

func (c *k8SServiceClient) GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error) {
	out := new(GetClustersResponse)
	err := c.cc.Invoke(ctx, K8SService_GetClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error) {
	out := new(GetClusterResponse)
	err := c.cc.Invoke(ctx, K8SService_GetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeGroups(ctx context.Context, in *GetNodeGroupsRequest, opts ...grpc.CallOption) (*GetNodeGroupsResponse, error) {
	out := new(GetNodeGroupsResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetWorkloads(ctx context.Context, in *GetWorkloadsRequest, opts ...grpc.CallOption) (*GetWorkloadsResponse, error) {
	out := new(GetWorkloadsResponse)
	err := c.cc.Invoke(ctx, K8SService_GetWorkloads_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetWorkload(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*GetWorkloadResponse, error) {
	out := new(GetWorkloadResponse)
	err := c.cc.Invoke(ctx, K8SService_GetWorkload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SServiceServer is the server API for K8SService service.
// All implementations must embed UnimplementedK8SServiceServer
// for forward compatibility
type K8SServiceServer interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error)
	// GetCluster retrieves detailed information for a specific cluster.
	GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error)
	// GetNodeGroups retrieves all node groups for a specific cluster.
	GetNodeGroups(context.Context, *GetNodeGroupsRequest) (*GetNodeGroupsResponse, error)
	// GetNode retrieves detailed information for a specific node.
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// GetWorkloads retrieves all workloads for a specific cluster.
	GetWorkloads(context.Context, *GetWorkloadsRequest) (*GetWorkloadsResponse, error)
	// GetWorkload retrieves detailed information for a specific workload.
	GetWorkload(context.Context, *GetWorkloadRequest) (*GetWorkloadResponse, error)
	mustEmbedUnimplementedK8SServiceServer()
}

// UnimplementedK8SServiceServer must be embedded to have forward compatible implementations.
type UnimplementedK8SServiceServer struct {
}

func (UnimplementedK8SServiceServer) GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedK8SServiceServer) GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeGroups(context.Context, *GetNodeGroupsRequest) (*GetNodeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroups not implemented")
}
func (UnimplementedK8SServiceServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedK8SServiceServer) GetWorkloads(context.Context, *GetWorkloadsRequest) (*GetWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloads not implemented")
}
func (UnimplementedK8SServiceServer) GetWorkload(context.Context, *GetWorkloadRequest) (*GetWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkload not implemented")
}
func (UnimplementedK8SServiceServer) mustEmbedUnimplementedK8SServiceServer() {}

// UnsafeK8SServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SServiceServer will
// result in compilation errors.
type UnsafeK8SServiceServer interface {
	mustEmbedUnimplementedK8SServiceServer()
}

func RegisterK8SServiceServer(s grpc.ServiceRegistrar, srv K8SServiceServer) {
	s.RegisterService(&K8SService_ServiceDesc, srv)
}

func _K8SService_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetClusters(ctx, req.(*GetClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeGroups(ctx, req.(*GetNodeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetWorkloads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetWorkloads(ctx, req.(*GetWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetWorkload(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SService_ServiceDesc is the grpc.ServiceDesc for K8SService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.K8SService",
	HandlerType: (*K8SServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusters",
			Handler:    _K8SService_GetClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _K8SService_GetCluster_Handler,
		},
		{
			MethodName: "GetNodeGroups",
			Handler:    _K8SService_GetNodeGroups_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _K8SService_GetNode_Handler,
		},
		{
			MethodName: "GetWorkloads",
			Handler:    _K8SService_GetWorkloads_Handler,
		},
		{
			MethodName: "GetWorkload",
			Handler:    _K8SService_GetWorkload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/k8s.proto",
}
