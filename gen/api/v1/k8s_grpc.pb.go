// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/k8s.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	K8SService_GetClusters_FullMethodName                   = "/api.v1.K8SService/GetClusters"
	K8SService_GetCluster_FullMethodName                    = "/api.v1.K8SService/GetCluster"
	K8SService_GetNodes_FullMethodName                      = "/api.v1.K8SService/GetNodes"
	K8SService_GetNodeGroups_FullMethodName                 = "/api.v1.K8SService/GetNodeGroups"
	K8SService_GetNodeUtilization_FullMethodName            = "/api.v1.K8SService/GetNodeUtilization"
	K8SService_GetNodeCost_FullMethodName                   = "/api.v1.K8SService/GetNodeCost"
	K8SService_GetClusterCost_FullMethodName                = "/api.v1.K8SService/GetClusterCost"
	K8SService_GetClusterCostAnalysis_FullMethodName        = "/api.v1.K8SService/GetClusterCostAnalysis"
	K8SService_GetWorkloadAnalysis_FullMethodName           = "/api.v1.K8SService/GetWorkloadAnalysis"
	K8SService_GetNodeDetails_FullMethodName                = "/api.v1.K8SService/GetNodeDetails"
	K8SService_GetNodeCostHistory_FullMethodName            = "/api.v1.K8SService/GetNodeCostHistory"
	K8SService_GetNodeCPUUsageHistory_FullMethodName        = "/api.v1.K8SService/GetNodeCPUUsageHistory"
	K8SService_GetNodeMemoryUsageHistory_FullMethodName     = "/api.v1.K8SService/GetNodeMemoryUsageHistory"
	K8SService_GetWorkloadDetails_FullMethodName            = "/api.v1.K8SService/GetWorkloadDetails"
	K8SService_GetWorkloadCostHistory_FullMethodName        = "/api.v1.K8SService/GetWorkloadCostHistory"
	K8SService_GetWorkloadCPUUsageHistory_FullMethodName    = "/api.v1.K8SService/GetWorkloadCPUUsageHistory"
	K8SService_GetWorkloadMemoryUsageHistory_FullMethodName = "/api.v1.K8SService/GetWorkloadMemoryUsageHistory"
)

// K8SServiceClient is the client API for K8SService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SServiceClient interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error)
	// GetCluster retrieves cluster details for a team.
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodeGroups(ctx context.Context, in *GetNodeGroupsRequest, opts ...grpc.CallOption) (*GetNodeGroupsResponse, error)
	// GetNodeUtilization returns node utilization over time for specific cluster.
	GetNodeUtilization(ctx context.Context, in *GetNodeUtilizationRequest, opts ...grpc.CallOption) (*GetNodeUtilizationResponse, error)
	// GetNodeCost returns node cost over time for specific cluster.
	GetNodeCost(ctx context.Context, in *GetNodeCostRequest, opts ...grpc.CallOption) (*GetNodeCostResponse, error)
	// GetClusterCost returns cluster cost over time for specific cluster.
	GetClusterCost(ctx context.Context, in *GetClusterCostRequest, opts ...grpc.CallOption) (*GetClusterCostResponse, error)
	// GetClusterCostAnalysis returns detailed cost analysis for a cluster
	GetClusterCostAnalysis(ctx context.Context, in *GetClusterCostAnalysisRequest, opts ...grpc.CallOption) (*GetClusterCostAnalysisResponse, error)
	// GetWorkloadAnalysis returns detailed workload analysis for a cluster
	GetWorkloadAnalysis(ctx context.Context, in *GetWorkloadAnalysisRequest, opts ...grpc.CallOption) (*GetWorkloadAnalysisResponse, error)
	// GetNodeDetails retrieves detailed information about a specific node
	GetNodeDetails(ctx context.Context, in *GetNodeDetailsRequest, opts ...grpc.CallOption) (*GetNodeDetailsResponse, error)
	// GetNodeCostHistory retrieves node cost history for a specific node
	GetNodeCostHistory(ctx context.Context, in *GetNodeCostHistoryRequest, opts ...grpc.CallOption) (*GetNodeCostHistoryResponse, error)
	// GetNodeCPUUsageHistory retrieves node CPU utilization history for a specific node
	GetNodeCPUUsageHistory(ctx context.Context, in *GetNodeCPUUsageHistoryRequest, opts ...grpc.CallOption) (*GetNodeCPUUsageHistoryResponse, error)
	// GetNodeMemoryUsageHistory retrieves node memory utilization history for a specific node
	GetNodeMemoryUsageHistory(ctx context.Context, in *GetNodeMemoryUsageHistoryRequest, opts ...grpc.CallOption) (*GetNodeMemoryUsageHistoryResponse, error)
	// GetWorkloadDetails retrieves detailed information about a specific workload
	GetWorkloadDetails(ctx context.Context, in *GetWorkloadDetailsRequest, opts ...grpc.CallOption) (*GetWorkloadDetailsResponse, error)
	// GetWorkloadCostHistory returns cost history for a specific workload.
	GetWorkloadCostHistory(ctx context.Context, in *GetWorkloadCostHistoryRequest, opts ...grpc.CallOption) (*GetWorkloadCostHistoryResponse, error)
	// GetWorkloadCPUUsageHistory returns CPU usage history for a specific workload.
	GetWorkloadCPUUsageHistory(ctx context.Context, in *GetWorkloadCPUUsageHistoryRequest, opts ...grpc.CallOption) (*GetWorkloadCPUUsageHistoryResponse, error)
	// GetWorkloadMemoryUsageHistory returns memory usage history for a specific workload.
	GetWorkloadMemoryUsageHistory(ctx context.Context, in *GetWorkloadMemoryUsageHistoryRequest, opts ...grpc.CallOption) (*GetWorkloadMemoryUsageHistoryResponse, error)
}

type k8SServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SServiceClient(cc grpc.ClientConnInterface) K8SServiceClient {
	return &k8SServiceClient{cc}
}

func (c *k8SServiceClient) GetClusters(ctx context.Context, in *GetClustersRequest, opts ...grpc.CallOption) (*GetClustersResponse, error) {
	out := new(GetClustersResponse)
	err := c.cc.Invoke(ctx, K8SService_GetClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error) {
	out := new(GetClusterResponse)
	err := c.cc.Invoke(ctx, K8SService_GetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeGroups(ctx context.Context, in *GetNodeGroupsRequest, opts ...grpc.CallOption) (*GetNodeGroupsResponse, error) {
	out := new(GetNodeGroupsResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeUtilization(ctx context.Context, in *GetNodeUtilizationRequest, opts ...grpc.CallOption) (*GetNodeUtilizationResponse, error) {
	out := new(GetNodeUtilizationResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeUtilization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeCost(ctx context.Context, in *GetNodeCostRequest, opts ...grpc.CallOption) (*GetNodeCostResponse, error) {
	out := new(GetNodeCostResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeCost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetClusterCost(ctx context.Context, in *GetClusterCostRequest, opts ...grpc.CallOption) (*GetClusterCostResponse, error) {
	out := new(GetClusterCostResponse)
	err := c.cc.Invoke(ctx, K8SService_GetClusterCost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetClusterCostAnalysis(ctx context.Context, in *GetClusterCostAnalysisRequest, opts ...grpc.CallOption) (*GetClusterCostAnalysisResponse, error) {
	out := new(GetClusterCostAnalysisResponse)
	err := c.cc.Invoke(ctx, K8SService_GetClusterCostAnalysis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetWorkloadAnalysis(ctx context.Context, in *GetWorkloadAnalysisRequest, opts ...grpc.CallOption) (*GetWorkloadAnalysisResponse, error) {
	out := new(GetWorkloadAnalysisResponse)
	err := c.cc.Invoke(ctx, K8SService_GetWorkloadAnalysis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeDetails(ctx context.Context, in *GetNodeDetailsRequest, opts ...grpc.CallOption) (*GetNodeDetailsResponse, error) {
	out := new(GetNodeDetailsResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeCostHistory(ctx context.Context, in *GetNodeCostHistoryRequest, opts ...grpc.CallOption) (*GetNodeCostHistoryResponse, error) {
	out := new(GetNodeCostHistoryResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeCostHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeCPUUsageHistory(ctx context.Context, in *GetNodeCPUUsageHistoryRequest, opts ...grpc.CallOption) (*GetNodeCPUUsageHistoryResponse, error) {
	out := new(GetNodeCPUUsageHistoryResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeCPUUsageHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetNodeMemoryUsageHistory(ctx context.Context, in *GetNodeMemoryUsageHistoryRequest, opts ...grpc.CallOption) (*GetNodeMemoryUsageHistoryResponse, error) {
	out := new(GetNodeMemoryUsageHistoryResponse)
	err := c.cc.Invoke(ctx, K8SService_GetNodeMemoryUsageHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetWorkloadDetails(ctx context.Context, in *GetWorkloadDetailsRequest, opts ...grpc.CallOption) (*GetWorkloadDetailsResponse, error) {
	out := new(GetWorkloadDetailsResponse)
	err := c.cc.Invoke(ctx, K8SService_GetWorkloadDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetWorkloadCostHistory(ctx context.Context, in *GetWorkloadCostHistoryRequest, opts ...grpc.CallOption) (*GetWorkloadCostHistoryResponse, error) {
	out := new(GetWorkloadCostHistoryResponse)
	err := c.cc.Invoke(ctx, K8SService_GetWorkloadCostHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetWorkloadCPUUsageHistory(ctx context.Context, in *GetWorkloadCPUUsageHistoryRequest, opts ...grpc.CallOption) (*GetWorkloadCPUUsageHistoryResponse, error) {
	out := new(GetWorkloadCPUUsageHistoryResponse)
	err := c.cc.Invoke(ctx, K8SService_GetWorkloadCPUUsageHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SServiceClient) GetWorkloadMemoryUsageHistory(ctx context.Context, in *GetWorkloadMemoryUsageHistoryRequest, opts ...grpc.CallOption) (*GetWorkloadMemoryUsageHistoryResponse, error) {
	out := new(GetWorkloadMemoryUsageHistoryResponse)
	err := c.cc.Invoke(ctx, K8SService_GetWorkloadMemoryUsageHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SServiceServer is the server API for K8SService service.
// All implementations must embed UnimplementedK8SServiceServer
// for forward compatibility
type K8SServiceServer interface {
	// GetClusters retrieves all clusters for a team.
	GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error)
	// GetCluster retrieves cluster details for a team.
	GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	// GetNodes retrieves all nodes for a specific cluster.
	GetNodeGroups(context.Context, *GetNodeGroupsRequest) (*GetNodeGroupsResponse, error)
	// GetNodeUtilization returns node utilization over time for specific cluster.
	GetNodeUtilization(context.Context, *GetNodeUtilizationRequest) (*GetNodeUtilizationResponse, error)
	// GetNodeCost returns node cost over time for specific cluster.
	GetNodeCost(context.Context, *GetNodeCostRequest) (*GetNodeCostResponse, error)
	// GetClusterCost returns cluster cost over time for specific cluster.
	GetClusterCost(context.Context, *GetClusterCostRequest) (*GetClusterCostResponse, error)
	// GetClusterCostAnalysis returns detailed cost analysis for a cluster
	GetClusterCostAnalysis(context.Context, *GetClusterCostAnalysisRequest) (*GetClusterCostAnalysisResponse, error)
	// GetWorkloadAnalysis returns detailed workload analysis for a cluster
	GetWorkloadAnalysis(context.Context, *GetWorkloadAnalysisRequest) (*GetWorkloadAnalysisResponse, error)
	// GetNodeDetails retrieves detailed information about a specific node
	GetNodeDetails(context.Context, *GetNodeDetailsRequest) (*GetNodeDetailsResponse, error)
	// GetNodeCostHistory retrieves node cost history for a specific node
	GetNodeCostHistory(context.Context, *GetNodeCostHistoryRequest) (*GetNodeCostHistoryResponse, error)
	// GetNodeCPUUsageHistory retrieves node CPU utilization history for a specific node
	GetNodeCPUUsageHistory(context.Context, *GetNodeCPUUsageHistoryRequest) (*GetNodeCPUUsageHistoryResponse, error)
	// GetNodeMemoryUsageHistory retrieves node memory utilization history for a specific node
	GetNodeMemoryUsageHistory(context.Context, *GetNodeMemoryUsageHistoryRequest) (*GetNodeMemoryUsageHistoryResponse, error)
	// GetWorkloadDetails retrieves detailed information about a specific workload
	GetWorkloadDetails(context.Context, *GetWorkloadDetailsRequest) (*GetWorkloadDetailsResponse, error)
	// GetWorkloadCostHistory returns cost history for a specific workload.
	GetWorkloadCostHistory(context.Context, *GetWorkloadCostHistoryRequest) (*GetWorkloadCostHistoryResponse, error)
	// GetWorkloadCPUUsageHistory returns CPU usage history for a specific workload.
	GetWorkloadCPUUsageHistory(context.Context, *GetWorkloadCPUUsageHistoryRequest) (*GetWorkloadCPUUsageHistoryResponse, error)
	// GetWorkloadMemoryUsageHistory returns memory usage history for a specific workload.
	GetWorkloadMemoryUsageHistory(context.Context, *GetWorkloadMemoryUsageHistoryRequest) (*GetWorkloadMemoryUsageHistoryResponse, error)
	mustEmbedUnimplementedK8SServiceServer()
}

// UnimplementedK8SServiceServer must be embedded to have forward compatible implementations.
type UnimplementedK8SServiceServer struct {
}

func (UnimplementedK8SServiceServer) GetClusters(context.Context, *GetClustersRequest) (*GetClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedK8SServiceServer) GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedK8SServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeGroups(context.Context, *GetNodeGroupsRequest) (*GetNodeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeGroups not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeUtilization(context.Context, *GetNodeUtilizationRequest) (*GetNodeUtilizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeUtilization not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeCost(context.Context, *GetNodeCostRequest) (*GetNodeCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeCost not implemented")
}
func (UnimplementedK8SServiceServer) GetClusterCost(context.Context, *GetClusterCostRequest) (*GetClusterCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterCost not implemented")
}
func (UnimplementedK8SServiceServer) GetClusterCostAnalysis(context.Context, *GetClusterCostAnalysisRequest) (*GetClusterCostAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterCostAnalysis not implemented")
}
func (UnimplementedK8SServiceServer) GetWorkloadAnalysis(context.Context, *GetWorkloadAnalysisRequest) (*GetWorkloadAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadAnalysis not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeDetails(context.Context, *GetNodeDetailsRequest) (*GetNodeDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeDetails not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeCostHistory(context.Context, *GetNodeCostHistoryRequest) (*GetNodeCostHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeCostHistory not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeCPUUsageHistory(context.Context, *GetNodeCPUUsageHistoryRequest) (*GetNodeCPUUsageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeCPUUsageHistory not implemented")
}
func (UnimplementedK8SServiceServer) GetNodeMemoryUsageHistory(context.Context, *GetNodeMemoryUsageHistoryRequest) (*GetNodeMemoryUsageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMemoryUsageHistory not implemented")
}
func (UnimplementedK8SServiceServer) GetWorkloadDetails(context.Context, *GetWorkloadDetailsRequest) (*GetWorkloadDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadDetails not implemented")
}
func (UnimplementedK8SServiceServer) GetWorkloadCostHistory(context.Context, *GetWorkloadCostHistoryRequest) (*GetWorkloadCostHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadCostHistory not implemented")
}
func (UnimplementedK8SServiceServer) GetWorkloadCPUUsageHistory(context.Context, *GetWorkloadCPUUsageHistoryRequest) (*GetWorkloadCPUUsageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadCPUUsageHistory not implemented")
}
func (UnimplementedK8SServiceServer) GetWorkloadMemoryUsageHistory(context.Context, *GetWorkloadMemoryUsageHistoryRequest) (*GetWorkloadMemoryUsageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadMemoryUsageHistory not implemented")
}
func (UnimplementedK8SServiceServer) mustEmbedUnimplementedK8SServiceServer() {}

// UnsafeK8SServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SServiceServer will
// result in compilation errors.
type UnsafeK8SServiceServer interface {
	mustEmbedUnimplementedK8SServiceServer()
}

func RegisterK8SServiceServer(s grpc.ServiceRegistrar, srv K8SServiceServer) {
	s.RegisterService(&K8SService_ServiceDesc, srv)
}

func _K8SService_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetClusters(ctx, req.(*GetClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeGroups(ctx, req.(*GetNodeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeUtilization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeUtilizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeUtilization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeUtilization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeUtilization(ctx, req.(*GetNodeUtilizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeCost(ctx, req.(*GetNodeCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetClusterCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetClusterCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetClusterCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetClusterCost(ctx, req.(*GetClusterCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetClusterCostAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterCostAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetClusterCostAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetClusterCostAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetClusterCostAnalysis(ctx, req.(*GetClusterCostAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetWorkloadAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetWorkloadAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetWorkloadAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetWorkloadAnalysis(ctx, req.(*GetWorkloadAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeDetails(ctx, req.(*GetNodeDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeCostHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeCostHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeCostHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeCostHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeCostHistory(ctx, req.(*GetNodeCostHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeCPUUsageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeCPUUsageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeCPUUsageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeCPUUsageHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeCPUUsageHistory(ctx, req.(*GetNodeCPUUsageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetNodeMemoryUsageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeMemoryUsageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetNodeMemoryUsageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetNodeMemoryUsageHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetNodeMemoryUsageHistory(ctx, req.(*GetNodeMemoryUsageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetWorkloadDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetWorkloadDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetWorkloadDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetWorkloadDetails(ctx, req.(*GetWorkloadDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetWorkloadCostHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadCostHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetWorkloadCostHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetWorkloadCostHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetWorkloadCostHistory(ctx, req.(*GetWorkloadCostHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetWorkloadCPUUsageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadCPUUsageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetWorkloadCPUUsageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetWorkloadCPUUsageHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetWorkloadCPUUsageHistory(ctx, req.(*GetWorkloadCPUUsageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SService_GetWorkloadMemoryUsageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadMemoryUsageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SServiceServer).GetWorkloadMemoryUsageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SService_GetWorkloadMemoryUsageHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SServiceServer).GetWorkloadMemoryUsageHistory(ctx, req.(*GetWorkloadMemoryUsageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SService_ServiceDesc is the grpc.ServiceDesc for K8SService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.K8SService",
	HandlerType: (*K8SServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusters",
			Handler:    _K8SService_GetClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _K8SService_GetCluster_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _K8SService_GetNodes_Handler,
		},
		{
			MethodName: "GetNodeGroups",
			Handler:    _K8SService_GetNodeGroups_Handler,
		},
		{
			MethodName: "GetNodeUtilization",
			Handler:    _K8SService_GetNodeUtilization_Handler,
		},
		{
			MethodName: "GetNodeCost",
			Handler:    _K8SService_GetNodeCost_Handler,
		},
		{
			MethodName: "GetClusterCost",
			Handler:    _K8SService_GetClusterCost_Handler,
		},
		{
			MethodName: "GetClusterCostAnalysis",
			Handler:    _K8SService_GetClusterCostAnalysis_Handler,
		},
		{
			MethodName: "GetWorkloadAnalysis",
			Handler:    _K8SService_GetWorkloadAnalysis_Handler,
		},
		{
			MethodName: "GetNodeDetails",
			Handler:    _K8SService_GetNodeDetails_Handler,
		},
		{
			MethodName: "GetNodeCostHistory",
			Handler:    _K8SService_GetNodeCostHistory_Handler,
		},
		{
			MethodName: "GetNodeCPUUsageHistory",
			Handler:    _K8SService_GetNodeCPUUsageHistory_Handler,
		},
		{
			MethodName: "GetNodeMemoryUsageHistory",
			Handler:    _K8SService_GetNodeMemoryUsageHistory_Handler,
		},
		{
			MethodName: "GetWorkloadDetails",
			Handler:    _K8SService_GetWorkloadDetails_Handler,
		},
		{
			MethodName: "GetWorkloadCostHistory",
			Handler:    _K8SService_GetWorkloadCostHistory_Handler,
		},
		{
			MethodName: "GetWorkloadCPUUsageHistory",
			Handler:    _K8SService_GetWorkloadCPUUsageHistory_Handler,
		},
		{
			MethodName: "GetWorkloadMemoryUsageHistory",
			Handler:    _K8SService_GetWorkloadMemoryUsageHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/k8s.proto",
}
