// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/department.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	K8SDepartmentService_CreateDepartment_FullMethodName  = "/api.v1.K8sDepartmentService/CreateDepartment"
	K8SDepartmentService_EditDepartment_FullMethodName    = "/api.v1.K8sDepartmentService/EditDepartment"
	K8SDepartmentService_GetDepartments_FullMethodName    = "/api.v1.K8sDepartmentService/GetDepartments"
	K8SDepartmentService_DeleteDepartments_FullMethodName = "/api.v1.K8sDepartmentService/DeleteDepartments"
)

// K8SDepartmentServiceClient is the client API for K8SDepartmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SDepartmentServiceClient interface {
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error)
	EditDepartment(ctx context.Context, in *EditDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDepartments(ctx context.Context, in *GetDepartmentsRequest, opts ...grpc.CallOption) (*GetDepartmentsResponse, error)
	DeleteDepartments(ctx context.Context, in *DeleteDepartmentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type k8SDepartmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SDepartmentServiceClient(cc grpc.ClientConnInterface) K8SDepartmentServiceClient {
	return &k8SDepartmentServiceClient{cc}
}

func (c *k8SDepartmentServiceClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error) {
	out := new(CreateDepartmentResponse)
	err := c.cc.Invoke(ctx, K8SDepartmentService_CreateDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SDepartmentServiceClient) EditDepartment(ctx context.Context, in *EditDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, K8SDepartmentService_EditDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SDepartmentServiceClient) GetDepartments(ctx context.Context, in *GetDepartmentsRequest, opts ...grpc.CallOption) (*GetDepartmentsResponse, error) {
	out := new(GetDepartmentsResponse)
	err := c.cc.Invoke(ctx, K8SDepartmentService_GetDepartments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SDepartmentServiceClient) DeleteDepartments(ctx context.Context, in *DeleteDepartmentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, K8SDepartmentService_DeleteDepartments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SDepartmentServiceServer is the server API for K8SDepartmentService service.
// All implementations must embed UnimplementedK8SDepartmentServiceServer
// for forward compatibility
type K8SDepartmentServiceServer interface {
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error)
	EditDepartment(context.Context, *EditDepartmentRequest) (*emptypb.Empty, error)
	GetDepartments(context.Context, *GetDepartmentsRequest) (*GetDepartmentsResponse, error)
	DeleteDepartments(context.Context, *DeleteDepartmentsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedK8SDepartmentServiceServer()
}

// UnimplementedK8SDepartmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedK8SDepartmentServiceServer struct {
}

func (UnimplementedK8SDepartmentServiceServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedK8SDepartmentServiceServer) EditDepartment(context.Context, *EditDepartmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDepartment not implemented")
}
func (UnimplementedK8SDepartmentServiceServer) GetDepartments(context.Context, *GetDepartmentsRequest) (*GetDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartments not implemented")
}
func (UnimplementedK8SDepartmentServiceServer) DeleteDepartments(context.Context, *DeleteDepartmentsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartments not implemented")
}
func (UnimplementedK8SDepartmentServiceServer) mustEmbedUnimplementedK8SDepartmentServiceServer() {}

// UnsafeK8SDepartmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SDepartmentServiceServer will
// result in compilation errors.
type UnsafeK8SDepartmentServiceServer interface {
	mustEmbedUnimplementedK8SDepartmentServiceServer()
}

func RegisterK8SDepartmentServiceServer(s grpc.ServiceRegistrar, srv K8SDepartmentServiceServer) {
	s.RegisterService(&K8SDepartmentService_ServiceDesc, srv)
}

func _K8SDepartmentService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SDepartmentServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SDepartmentService_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SDepartmentServiceServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SDepartmentService_EditDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SDepartmentServiceServer).EditDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SDepartmentService_EditDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SDepartmentServiceServer).EditDepartment(ctx, req.(*EditDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SDepartmentService_GetDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SDepartmentServiceServer).GetDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SDepartmentService_GetDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SDepartmentServiceServer).GetDepartments(ctx, req.(*GetDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SDepartmentService_DeleteDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SDepartmentServiceServer).DeleteDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SDepartmentService_DeleteDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SDepartmentServiceServer).DeleteDepartments(ctx, req.(*DeleteDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SDepartmentService_ServiceDesc is the grpc.ServiceDesc for K8SDepartmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SDepartmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.K8sDepartmentService",
	HandlerType: (*K8SDepartmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepartment",
			Handler:    _K8SDepartmentService_CreateDepartment_Handler,
		},
		{
			MethodName: "EditDepartment",
			Handler:    _K8SDepartmentService_EditDepartment_Handler,
		},
		{
			MethodName: "GetDepartments",
			Handler:    _K8SDepartmentService_GetDepartments_Handler,
		},
		{
			MethodName: "DeleteDepartments",
			Handler:    _K8SDepartmentService_DeleteDepartments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/department.proto",
}
